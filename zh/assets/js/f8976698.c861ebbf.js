"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[910],{2130:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>g,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"examples/features","title":"\u529f\u80fd\u793a\u4f8b","description":"\u672c\u8282\u63d0\u4f9b\u4e86 Contexify \u5404\u79cd\u529f\u80fd\u7684\u72ec\u7acb\u793a\u4f8b\u3002","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/examples/features.md","sourceDirName":"examples","slug":"/examples/features","permalink":"/contexify/zh/docs/examples/features","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/examples/features.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"\u57fa\u672c\u793a\u4f8b","permalink":"/contexify/zh/docs/examples/basic-example"},"next":{"title":"\u6a21\u5757\u5316\u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b","permalink":"/contexify/zh/docs/examples/modular-app"}}');var o=t(7968),i=t(9880);const c={sidebar_position:2},s="\u529f\u80fd\u793a\u4f8b",a={},l=[{value:"\u57fa\u672c\u7684 Context \u548c Binding",id:"\u57fa\u672c\u7684-context-\u548c-binding",level:2},{value:"\u4f9d\u8d56\u6ce8\u5165",id:"\u4f9d\u8d56\u6ce8\u5165",level:2},{value:"Context \u5c42\u6b21\u7ed3\u6784",id:"context-\u5c42\u6b21\u7ed3\u6784",level:2},{value:"\u7ed1\u5b9a\u4f5c\u7528\u57df",id:"\u7ed1\u5b9a\u4f5c\u7528\u57df",level:2},{value:"\u62e6\u622a\u5668",id:"\u62e6\u622a\u5668",level:2},{value:"Context \u4e8b\u4ef6\u548c\u89c2\u5bdf\u8005",id:"context-\u4e8b\u4ef6\u548c\u89c2\u5bdf\u8005",level:2},{value:"Context \u89c6\u56fe",id:"context-\u89c6\u56fe",level:2},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:2},{value:"\u63d0\u4f9b\u8005",id:"\u63d0\u4f9b\u8005",level:2},{value:"\u4e0b\u4e00\u6b65",id:"\u4e0b\u4e00\u6b65",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"\u529f\u80fd\u793a\u4f8b",children:"\u529f\u80fd\u793a\u4f8b"})}),"\n",(0,o.jsx)(e.p,{children:"\u672c\u8282\u63d0\u4f9b\u4e86 Contexify \u5404\u79cd\u529f\u80fd\u7684\u72ec\u7acb\u793a\u4f8b\u3002"}),"\n",(0,o.jsx)(e.h2,{id:"\u57fa\u672c\u7684-context-\u548c-binding",children:"\u57fa\u672c\u7684 Context \u548c Binding"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86 Context \u548c Binding \u7684\u57fa\u672c\u7528\u6cd5\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a context\nconst context = new Context('my-context');\n\n// Bind a value\ncontext.bind('greeting').to('Hello, world!');\n\n// Retrieve the value\nasync function run() {\n  const greeting = await context.get('greeting');\n  console.log(greeting); // Output: Hello, world!\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u4f9d\u8d56\u6ce8\u5165",children:"\u4f9d\u8d56\u6ce8\u5165"}),"\n",(0,o.jsxs)(e.p,{children:["\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4f7f\u7528 ",(0,o.jsx)(e.code,{children:"@inject"})," \u88c5\u9970\u5668\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\u3002"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context, injectable, inject } from 'contexify';\n\n// Define interfaces\ninterface Logger {\n  log(message: string): void;\n}\n\ninterface UserService {\n  createUser(name: string): Promise<User>;\n}\n\ninterface User {\n  id: string;\n  name: string;\n}\n\n// Implement services\n@injectable()\nclass ConsoleLogger implements Logger {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n@injectable()\nclass DefaultUserService implements UserService {\n  constructor(@inject('services.Logger') private logger: Logger) {}\n\n  async createUser(name: string): Promise<User> {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind services\ncontext.bind('services.Logger').toClass(ConsoleLogger);\ncontext.bind('services.UserService').toClass(DefaultUserService);\n\n// Use services\nasync function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const user = await userService.createUser('John Doe');\n  console.log('Created user:', user);\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"context-\u5c42\u6b21\u7ed3\u6784",children:"Context \u5c42\u6b21\u7ed3\u6784"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e0a\u4e0b\u6587\u5c42\u6b21\u7ed3\u6784\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a root context\nconst rootContext = new Context('root');\nrootContext.bind('greeting').to('Hello from root!');\nrootContext.bind('name').to('Root');\n\n// Create a child context\nconst childContext = new Context(rootContext, 'child');\nchildContext.bind('name').to('Child');\n\n// Create a grandchild context\nconst grandchildContext = new Context(childContext, 'grandchild');\n\n// Retrieve values\nasync function run() {\n  // Grandchild inherits from child and root\n  console.log(await grandchildContext.get('greeting')); // Output: Hello from root!\n  console.log(await grandchildContext.get('name')); // Output: Child (from child context)\n\n  // Child inherits from root\n  console.log(await childContext.get('greeting')); // Output: Hello from root!\n  console.log(await childContext.get('name')); // Output: Child\n\n  // Root only has its own bindings\n  console.log(await rootContext.get('greeting')); // Output: Hello from root!\n  console.log(await rootContext.get('name')); // Output: Root\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u7ed1\u5b9a\u4f5c\u7528\u57df",children:"\u7ed1\u5b9a\u4f5c\u7528\u57df"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e0d\u540c\u7684\u7ed1\u5b9a\u4f5c\u7528\u57df\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context, BindingScope, injectable } from 'contexify';\n\n@injectable()\nclass Counter {\n  private count = 0;\n\n  increment() {\n    this.count++;\n    return this.count;\n  }\n\n  getCount() {\n    return this.count;\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Singleton scope: One instance for the entire application\ncontext\n  .bind('counters.singleton')\n  .toClass(Counter)\n  .inScope(BindingScope.SINGLETON);\n\n// Transient scope: New instance each time it's resolved\ncontext\n  .bind('counters.transient')\n  .toClass(Counter)\n  .inScope(BindingScope.TRANSIENT);\n\n// Context scope: One instance per context\ncontext\n  .bind('counters.context')\n  .toClass(Counter)\n  .inScope(BindingScope.CONTEXT);\n\n// Use counters\nasync function run() {\n  // Singleton counter\n  const singleton1 = await context.get('counters.singleton');\n  const singleton2 = await context.get('counters.singleton');\n  \n  singleton1.increment();\n  console.log('Singleton 1 count:', singleton1.getCount()); // Output: 1\n  console.log('Singleton 2 count:', singleton2.getCount()); // Output: 1 (same instance)\n  \n  // Transient counter\n  const transient1 = await context.get('counters.transient');\n  const transient2 = await context.get('counters.transient');\n  \n  transient1.increment();\n  console.log('Transient 1 count:', transient1.getCount()); // Output: 1\n  console.log('Transient 2 count:', transient2.getCount()); // Output: 0 (different instance)\n  \n  // Context counter\n  const context1 = await context.get('counters.context');\n  const context2 = await context.get('counters.context');\n  \n  context1.increment();\n  console.log('Context 1 count:', context1.getCount()); // Output: 1\n  console.log('Context 2 count:', context2.getCount()); // Output: 1 (same instance in this context)\n  \n  // Create a child context\n  const childContext = new Context(context, 'child');\n  \n  // Context counter in child context\n  const childContext1 = await childContext.get('counters.context');\n  \n  console.log('Child context count:', childContext1.getCount()); // Output: 0 (different instance in child context)\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u62e6\u622a\u5668",children:"\u62e6\u622a\u5668"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u62e6\u622a\u5668\u7684\u4f7f\u7528\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context, injectable, intercept, Interceptor, InvocationContext, ValueOrPromise } from 'contexify';\n\n// Define an interceptor\nclass LogInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    const { methodName, args } = invocationCtx;\n    console.log(`Calling ${methodName} with args:`, args);\n    \n    const start = Date.now();\n    try {\n      const result = await next();\n      const duration = Date.now() - start;\n      console.log(`${methodName} completed in ${duration}ms with result:`, result);\n      return result;\n    } catch (error) {\n      const duration = Date.now() - start;\n      console.error(`${methodName} failed after ${duration}ms with error:`, error);\n      throw error;\n    }\n  }\n}\n\n// Define a service with intercepted methods\n@injectable()\nclass CalculatorService {\n  @intercept(LogInterceptor)\n  add(a: number, b: number): number {\n    return a + b;\n  }\n  \n  @intercept(LogInterceptor)\n  divide(a: number, b: number): number {\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    return a / b;\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind the service\ncontext.bind('services.CalculatorService').toClass(CalculatorService);\n\n// Use the service\nasync function run() {\n  const calculator = await context.get<CalculatorService>('services.CalculatorService');\n  \n  // Call the add method\n  const sum = calculator.add(2, 3);\n  console.log('Sum:', sum);\n  \n  // Call the divide method\n  try {\n    const quotient = calculator.divide(10, 2);\n    console.log('Quotient:', quotient);\n    \n    // This will throw an error\n    calculator.divide(10, 0);\n  } catch (error) {\n    console.error('Error caught:', error.message);\n  }\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"context-\u4e8b\u4ef6\u548c\u89c2\u5bdf\u8005",children:"Context \u4e8b\u4ef6\u548c\u89c2\u5bdf\u8005"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e0a\u4e0b\u6587\u4e8b\u4ef6\u548c\u89c2\u5bdf\u8005\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context, ContextObserver } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Create an observer\nconst serviceObserver: ContextObserver = {\n  // Only interested in bindings with 'service' tag\n  filter: binding => binding.tagMap.service != null,\n\n  observe(event, binding, ctx) {\n    if (event === 'bind') {\n      console.log(`Service registered: ${binding.key}`);\n    } else if (event === 'unbind') {\n      console.log(`Service unregistered: ${binding.key}`);\n    }\n  }\n};\n\n// Register the observer\ncontext.subscribe(serviceObserver);\n\n// Add bindings\ncontext.bind('services.UserService')\n  .to({ name: 'UserService' })\n  .tag('service');\n\ncontext.bind('services.OrderService')\n  .to({ name: 'OrderService' })\n  .tag('service');\n\ncontext.bind('repositories.UserRepository')\n  .to({ name: 'UserRepository' })\n  .tag('repository');\n\n// Remove a binding\ncontext.unbind('services.OrderService');\n\n// Output:\n// Service registered: services.UserService\n// Service registered: services.OrderService\n// Service unregistered: services.OrderService\n"})}),"\n",(0,o.jsx)(e.h2,{id:"context-\u89c6\u56fe",children:"Context \u89c6\u56fe"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e0a\u4e0b\u6587\u89c6\u56fe\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Create a view that tracks all bindings with 'controller' tag\nconst controllersView = context.createView(\n  binding => binding.tagMap.controller != null\n);\n\n// Listen for view events\ncontrollersView.on('refresh', () => {\n  console.log('Controllers view refreshed');\n});\n\n// Add controllers\ncontext.bind('controllers.UserController')\n  .to({ name: 'UserController' })\n  .tag('controller');\n\ncontext.bind('controllers.OrderController')\n  .to({ name: 'OrderController' })\n  .tag('controller');\n\n// Get all controllers\nasync function getControllers() {\n  const controllers = await controllersView.values();\n  console.log('Controllers:', controllers.map(c => c.name));\n}\n\n// Remove a controller\nfunction removeOrderController() {\n  context.unbind('controllers.OrderController');\n}\n\n// Run the example\nasync function run() {\n  await getControllers();\n  // Output: Controllers: ['UserController', 'OrderController']\n  \n  removeOrderController();\n  \n  await getControllers();\n  // Output: Controllers: ['UserController']\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u914d\u7f6e",children:"\u914d\u7f6e"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u914d\u7f6e\u7ba1\u7406\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context, injectable, config } from 'contexify';\n\n// Define configuration types\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\ninterface ServerConfig {\n  port: number;\n  host: string;\n}\n\n// Define a service that uses configuration\n@injectable()\nclass DatabaseService {\n  constructor(\n    @config() private config: DatabaseConfig\n  ) {}\n  \n  connect() {\n    const { host, port, username, password, database } = this.config;\n    console.log(`Connecting to database ${database} at ${host}:${port} with username ${username}`);\n    // In a real application, this would connect to a database\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind the service\ncontext.bind('services.DatabaseService').toClass(DatabaseService);\n\n// Configure the service\ncontext.configure('services.DatabaseService').to({\n  host: 'localhost',\n  port: 5432,\n  username: 'admin',\n  password: 'password',\n  database: 'myapp',\n});\n\n// Use the service\nasync function run() {\n  const dbService = await context.get<DatabaseService>('services.DatabaseService');\n  dbService.connect();\n  // Output: Connecting to database myapp at localhost:5432 with username admin\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u63d0\u4f9b\u8005",children:"\u63d0\u4f9b\u8005"}),"\n",(0,o.jsx)(e.p,{children:"\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u63d0\u4f9b\u8005\u7684\u4f7f\u7528\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Context, Provider, injectable, inject } from 'contexify';\n\n// Define interfaces\ninterface Logger {\n  log(message: string): void;\n}\n\ninterface LoggerFactory {\n  createLogger(name: string): Logger;\n}\n\n// Implement a provider\n@injectable()\nclass LoggerFactoryProvider implements Provider<LoggerFactory> {\n  value(): LoggerFactory {\n    return {\n      createLogger: (name: string): Logger => {\n        return {\n          log: (message: string) => {\n            console.log(`[${name}] ${message}`);\n          },\n        };\n      },\n    };\n  }\n}\n\n// Implement a service that uses the provider\n@injectable()\nclass UserService {\n  private logger: Logger;\n  \n  constructor(\n    @inject('factories.LoggerFactory') loggerFactory: LoggerFactory\n  ) {\n    this.logger = loggerFactory.createLogger('UserService');\n  }\n  \n  createUser(name: string) {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind the provider\ncontext.bind('factories.LoggerFactory').toProvider(LoggerFactoryProvider);\n\n// Bind the service\ncontext.bind('services.UserService').toClass(UserService);\n\n// Use the service\nasync function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const user = userService.createUser('John Doe');\n  console.log('Created user:', user);\n  // Output:\n  // [UserService] Creating user: John Doe\n  // Created user: { id: '1621234567890', name: 'John Doe' }\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u4e0b\u4e00\u6b65",children:"\u4e0b\u4e00\u6b65"}),"\n",(0,o.jsx)(e.p,{children:"\u73b0\u5728\u60a8\u5df2\u7ecf\u770b\u5230\u4e86 Contexify \u5404\u79cd\u529f\u80fd\u7684\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\uff1a"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\u63a2\u7d22",(0,o.jsx)(e.a,{href:"./modular-app",children:"\u6a21\u5757\u5316\u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b"}),"\uff0c\u4e86\u89e3\u8fd9\u4e9b\u529f\u80fd\u5982\u4f55\u5728\u5b8c\u6574\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528"]}),"\n",(0,o.jsxs)(e.li,{children:["\u9605\u8bfb",(0,o.jsx)(e.a,{href:"../category/core-concepts",children:"\u6838\u5fc3\u6982\u5ff5"}),"\u6587\u6863\uff0c\u4e86\u89e3\u6709\u5173\u8fd9\u4e9b\u793a\u4f8b\u4e2d\u6f14\u793a\u7684\u6982\u5ff5\u7684\u66f4\u591a\u4fe1\u606f"]}),"\n",(0,o.jsxs)(e.li,{children:["\u67e5\u770b",(0,o.jsx)(e.a,{href:"../category/guides",children:"\u6307\u5357"}),"\uff0c\u83b7\u53d6\u6700\u4f73\u5b9e\u8df5\u548c\u64cd\u4f5c\u8bf4\u660e"]}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},9880:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>s});var r=t(4700);const o={},i=r.createContext(o);function c(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);