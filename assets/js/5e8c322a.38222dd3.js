"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[594],{82:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/index","title":"API Reference","description":"This section provides a reference for the Contexify API.","source":"@site/docs/api/index.md","sourceDirName":"api","slug":"/api/","permalink":"/contexify/docs/api/","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/contexify/docs/category/api-reference"},"next":{"title":"API Usage Examples","permalink":"/contexify/docs/api/examples"}}');var r=t(7968),s=t(991);const o={sidebar_position:1},c="API Reference",a={},d=[{value:"Core Classes",id:"core-classes",level:2},{value:"Context",id:"context",level:3},{value:"Binding",id:"binding",level:3},{value:"ContextView",id:"contextview",level:3},{value:"Decorators",id:"decorators",level:2},{value:"@injectable()",id:"injectable",level:3},{value:"@inject()",id:"inject",level:3},{value:"@inject.tag()",id:"injecttag",level:3},{value:"@inject.getter()",id:"injectgetter",level:3},{value:"@inject.view()",id:"injectview",level:3},{value:"@config()",id:"config",level:3},{value:"@intercept()",id:"intercept",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"Provider",id:"provider",level:3},{value:"Interceptor",id:"interceptor",level:3},{value:"ContextObserver",id:"contextobserver",level:3},{value:"Enums",id:"enums",level:2},{value:"BindingScope",id:"bindingscope",level:3},{value:"Types",id:"types",level:2},{value:"Constructor",id:"constructor",level:3},{value:"ValueOrPromise",id:"valueorpromise",level:3},{value:"Getter",id:"getter",level:3},{value:"BindingFilter",id:"bindingfilter",level:3},{value:"BindingComparator",id:"bindingcomparator",level:3},{value:"For More Information",id:"for-more-information",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,r.jsx)(n.p,{children:"This section provides a reference for the Contexify API."}),"\n",(0,r.jsx)(n.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,r.jsx)(n.h3,{id:"context",children:"Context"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Context"})," class is the core of the Contexify framework. It serves as a registry for bindings and provides methods for managing dependencies."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class Context {\n  // Constructor\n  constructor(parent?: Context, name?: string);\n\n  // Binding methods\n  bind(key: string): Binding;\n  add(binding: Binding): this;\n  unbind(key: string): boolean;\n  contains(key: string): boolean;\n  \n  // Resolution methods\n  get<T>(key: string, options?: ResolutionOptions): Promise<T>;\n  getSync<T>(key: string, options?: ResolutionOptions): T;\n  getBinding(key: string): Binding | undefined;\n  find(pattern: string | RegExp): Promise<Binding[]>;\n  findByTag(tag: string): Promise<Binding[]>;\n  \n  // Configuration methods\n  configure(key: string): Binding;\n  getConfig<T>(key: string, options?: ResolutionOptions): Promise<T>;\n  \n  // Context view methods\n  createView<T>(filter: BindingFilter, comparator?: BindingComparator): ContextView<T>;\n  \n  // Observer methods\n  subscribe(observer: ContextEventObserver): this;\n  unsubscribe(observer: ContextEventObserver): boolean;\n  \n  // Event methods\n  on(event: string, listener: ContextEventListener): this;\n  once(event: string, listener: ContextEventListener): this;\n  off(event: string, listener: ContextEventListener): this;\n  \n  // Lifecycle methods\n  close(): void;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"binding",children:"Binding"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Binding"})," class represents a connection between a key and a value in the Context."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class Binding<T = unknown> {\n  // Static methods\n  static create<T>(key: string): Binding<T>;\n  \n  // Properties\n  readonly key: string;\n  readonly scope: BindingScope;\n  readonly tags: Set<string>;\n  readonly tagMap: { [tag: string]: unknown };\n  \n  // Binding methods\n  to(value: T): this;\n  toClass(ctor: Constructor<T>): this;\n  toDynamicValue(factory: (context: Context) => ValueOrPromise<T>): this;\n  toProvider(providerClass: Constructor<Provider<T>>): this;\n  toAlias(key: string): this;\n  \n  // Scope methods\n  inScope(scope: BindingScope): this;\n  \n  // Tag methods\n  tag(tag: string | { [tag: string]: unknown }): this;\n  tagMap(tagMap: { [tag: string]: unknown }): this;\n  \n  // Configuration methods\n  configure(key: string): Binding;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"contextview",children:"ContextView"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContextView"})," class allows you to track a set of bindings that match a specific filter."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class ContextView<T> {\n  // Constructor\n  constructor(\n    context: Context,\n    filter: BindingFilter,\n    comparator?: BindingComparator\n  );\n  \n  // Methods\n  resolve(): Promise<T[]>;\n  values(): Promise<T[]>;\n  bindings(): Readonly<Binding>[];\n  \n  // Event methods\n  on(event: string, listener: Function): this;\n  once(event: string, listener: Function): this;\n  off(event: string, listener: Function): this;\n  \n  // Lifecycle methods\n  close(): void;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,r.jsx)(n.h3,{id:"injectable",children:"@injectable()"}),"\n",(0,r.jsx)(n.p,{children:"Marks a class as injectable, allowing Contexify to create instances of it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function injectable(): ClassDecorator;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inject",children:"@inject()"}),"\n",(0,r.jsx)(n.p,{children:"Injects a dependency by its binding key."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function inject(\n  bindingKey: string,\n  options?: InjectionOptions\n): ParameterDecorator & PropertyDecorator;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"injecttag",children:"@inject.tag()"}),"\n",(0,r.jsx)(n.p,{children:"Injects all dependencies that match a specific tag."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"namespace inject {\n  function tag(\n    tag: string,\n    options?: InjectionOptions\n  ): ParameterDecorator & PropertyDecorator;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"injectgetter",children:"@inject.getter()"}),"\n",(0,r.jsx)(n.p,{children:"Injects a function that can be used to get the dependency later."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"namespace inject {\n  function getter(\n    bindingKey: string,\n    options?: InjectionOptions\n  ): ParameterDecorator & PropertyDecorator;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"injectview",children:"@inject.view()"}),"\n",(0,r.jsx)(n.p,{children:"Injects a ContextView that tracks bindings matching a filter."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"namespace inject {\n  function view(\n    filter: BindingFilter,\n    options?: InjectionOptions\n  ): ParameterDecorator & PropertyDecorator;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"config",children:"@config()"}),"\n",(0,r.jsx)(n.p,{children:"Injects configuration for the current binding."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function config(\n  propertyPath?: string | ConfigurationOptions\n): ParameterDecorator & PropertyDecorator;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"intercept",children:"@intercept()"}),"\n",(0,r.jsx)(n.p,{children:"Applies interceptors to a method or class."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function intercept(\n  ...interceptors: (Interceptor | Constructor<Interceptor>)[]\n): MethodDecorator & ClassDecorator;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"provider",children:"Provider"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Provider"})," interface defines a class that can create values dynamically."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Provider<T> {\n  value(): ValueOrPromise<T>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"interceptor",children:"Interceptor"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Interceptor"})," interface defines a class that can intercept method calls."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Interceptor {\n  intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ): ValueOrPromise<any>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"contextobserver",children:"ContextObserver"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContextObserver"})," interface defines a class that can observe context events."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ContextObserver {\n  filter?: BindingFilter;\n  observe(\n    eventType: string,\n    binding: Readonly<Binding<unknown>>,\n    context: Context\n  ): ValueOrPromise<void>;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,r.jsx)(n.h3,{id:"bindingscope",children:"BindingScope"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BindingScope"})," enum defines the scope of a binding."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum BindingScope {\n  SINGLETON = 'singleton',\n  TRANSIENT = 'transient',\n  CONTEXT = 'context',\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Constructor"})," type represents a class constructor."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type Constructor<T> = new (...args: any[]) => T;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"valueorpromise",children:"ValueOrPromise"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ValueOrPromise"})," type represents a value or a promise of a value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type ValueOrPromise<T> = T | Promise<T>;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getter",children:"Getter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Getter"})," type represents a function that returns a value or a promise of a value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type Getter<T> = () => ValueOrPromise<T>;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bindingfilter",children:"BindingFilter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BindingFilter"})," type represents a function that filters bindings."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type BindingFilter = (binding: Readonly<Binding<unknown>>) => boolean;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bindingcomparator",children:"BindingComparator"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BindingComparator"})," type represents a function that compares bindings."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type BindingComparator = (a: Readonly<Binding<unknown>>, b: Readonly<Binding<unknown>>) => number;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"for-more-information",children:"For More Information"}),"\n",(0,r.jsx)(n.p,{children:"For more detailed information about the API, please refer to the TypeScript definitions in the source code or the generated API documentation."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},991:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(4700);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);