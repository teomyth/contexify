"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[97],{991:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(4700);const o={},c=r.createContext(o);function i(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:t},e.children)}},8923:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"examples/interceptors","title":"Interceptors Example","description":"This example demonstrates how to use Contexify\'s interceptor feature to add cross-cutting concerns.","source":"@site/docs/examples/interceptors.md","sourceDirName":"examples","slug":"/examples/interceptors","permalink":"/contexify/docs/examples/interceptors","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/examples/interceptors.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Modular Application Example","permalink":"/contexify/docs/examples/modular-app"},"next":{"title":"Observers Example","permalink":"/contexify/docs/examples/observers"}}');var o=n(7968),c=n(991);const i={sidebar_position:3},s="Interceptors Example",a={},l=[{value:"What are Interceptors?",id:"what-are-interceptors",level:2},{value:"Creating an Interceptor",id:"creating-an-interceptor",level:2},{value:"Using Interceptors",id:"using-interceptors",level:2},{value:"Method-level Interceptors",id:"method-level-interceptors",level:3},{value:"Class-level Interceptors",id:"class-level-interceptors",level:3},{value:"Multiple Interceptors",id:"multiple-interceptors",level:3},{value:"Common Interceptor Patterns",id:"common-interceptor-patterns",level:2},{value:"Caching Interceptor",id:"caching-interceptor",level:3},{value:"Error Handling Interceptor",id:"error-handling-interceptor",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Key Points",id:"key-points",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"interceptors-example",children:"Interceptors Example"})}),"\n",(0,o.jsx)(t.p,{children:"This example demonstrates how to use Contexify's interceptor feature to add cross-cutting concerns."}),"\n",(0,o.jsx)(t.h2,{id:"what-are-interceptors",children:"What are Interceptors?"}),"\n",(0,o.jsx)(t.p,{children:"Interceptors allow you to execute code before and after method calls without modifying the method itself. This is useful for adding cross-cutting concerns like logging, performance monitoring, error handling, etc."}),"\n",(0,o.jsx)(t.h2,{id:"creating-an-interceptor",children:"Creating an Interceptor"}),"\n",(0,o.jsx)(t.p,{children:"First, let's create a simple logging interceptor:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { Interceptor, InvocationContext, ValueOrPromise } from 'contexify';\n\nclass LogInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    // Code executed before the method call\n    const { methodName, args } = invocationCtx;\n    console.log(`Calling ${methodName} method with args:`, args);\n    \n    const start = Date.now();\n    try {\n      // Call the next interceptor or the method itself\n      const result = await next();\n      \n      // Code executed after the method call\n      const duration = Date.now() - start;\n      console.log(`${methodName} method completed in ${duration}ms with result:`, result);\n      \n      // Return the result\n      return result;\n    } catch (error) {\n      // Code executed if the method throws an error\n      const duration = Date.now() - start;\n      console.error(`${methodName} method failed after ${duration}ms with error:`, error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"using-interceptors",children:"Using Interceptors"}),"\n",(0,o.jsx)(t.h3,{id:"method-level-interceptors",children:"Method-level Interceptors"}),"\n",(0,o.jsxs)(t.p,{children:["You can apply interceptors to specific methods using the ",(0,o.jsx)(t.code,{children:"@intercept"})," decorator:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { LogInterceptor } from './interceptors';\n\n@injectable()\nclass UserService {\n  @intercept(LogInterceptor)\n  async createUser(userData: UserData) {\n    // Method implementation\n    return { id: '123', ...userData };\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"class-level-interceptors",children:"Class-level Interceptors"}),"\n",(0,o.jsx)(t.p,{children:"You can apply interceptors to all methods of a class:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { LogInterceptor } from './interceptors';\n\n@injectable()\n@intercept(LogInterceptor)\nclass UserService {\n  async createUser(userData: UserData) {\n    // Method implementation\n    return { id: '123', ...userData };\n  }\n  \n  async getUser(id: string) {\n    // Method implementation\n    return { id, name: 'John Doe' };\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"multiple-interceptors",children:"Multiple Interceptors"}),"\n",(0,o.jsx)(t.p,{children:"You can apply multiple interceptors to a method or class. They will be executed in the order they are specified:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { AuthInterceptor, LogInterceptor, CacheInterceptor } from './interceptors';\n\n@injectable()\nclass UserService {\n  @intercept(AuthInterceptor, LogInterceptor, CacheInterceptor)\n  async getUser(id: string) {\n    // Method implementation\n    return { id, name: 'John Doe' };\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"common-interceptor-patterns",children:"Common Interceptor Patterns"}),"\n",(0,o.jsx)(t.h3,{id:"caching-interceptor",children:"Caching Interceptor"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"class CacheInterceptor implements Interceptor {\n  private cache = new Map<string, any>();\n  \n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    const { methodName, args } = invocationCtx;\n    const cacheKey = `${methodName}:${JSON.stringify(args)}`;\n    \n    // Check if result is in cache\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Call the method\n    const result = await next();\n    \n    // Cache the result\n    this.cache.set(cacheKey, result);\n    \n    return result;\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"error-handling-interceptor",children:"Error Handling Interceptor"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"class ErrorHandlingInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    try {\n      return await next();\n    } catch (error) {\n      // Handle the error\n      console.error('Error in method execution:', error);\n      \n      // You can transform the error\n      throw new ApplicationError('An error occurred', { cause: error });\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsxs)(t.p,{children:["The complete example code can be found in the ",(0,o.jsx)(t.a,{href:"https://github.com/teomyth/contexify/tree/main/examples/features/interceptors",children:"examples/features/interceptors"})," directory."]}),"\n",(0,o.jsx)(t.h2,{id:"key-points",children:"Key Points"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Interceptors allow you to add cross-cutting concerns without modifying the method itself"}),"\n",(0,o.jsx)(t.li,{children:"You can apply interceptors to specific methods or entire classes"}),"\n",(0,o.jsx)(t.li,{children:"You can combine multiple interceptors to implement complex functionality"}),"\n",(0,o.jsx)(t.li,{children:"Common use cases include logging, caching, error handling, and performance monitoring"}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);