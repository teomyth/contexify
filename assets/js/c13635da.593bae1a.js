"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[233],{991:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>d});var s=i(4700);const t={},c=s.createContext(t);function o(n){const e=s.useContext(c);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(c.Provider,{value:e},n.children)}},7813:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"core-concepts/binding","title":"Binding","description":"What is a Binding?","source":"@site/docs/core-concepts/binding.md","sourceDirName":"core-concepts","slug":"/core-concepts/binding","permalink":"/contexify/docs/core-concepts/binding","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/core-concepts/binding.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Context","permalink":"/contexify/docs/core-concepts/context"},"next":{"title":"Dependency Injection","permalink":"/contexify/docs/core-concepts/dependency-injection"}}');var t=i(7968),c=i(991);const o={sidebar_position:2},d="Binding",r={},a=[{value:"What is a Binding?",id:"what-is-a-binding",level:2},{value:"Binding Keys",id:"binding-keys",level:2},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Binding Types",id:"binding-types",level:2},{value:"Value Binding",id:"value-binding",level:3},{value:"Class Binding",id:"class-binding",level:3},{value:"Factory Function Binding",id:"factory-function-binding",level:3},{value:"Provider Binding",id:"provider-binding",level:3},{value:"Binding Scopes",id:"binding-scopes",level:2},{value:"Scope Guidelines",id:"scope-guidelines",level:3},{value:"Binding Tags",id:"binding-tags",level:2},{value:"Binding Configuration",id:"binding-configuration",level:2},{value:"Creating and Managing Bindings",id:"creating-and-managing-bindings",level:2},{value:"Adding Bindings",id:"adding-bindings",level:3},{value:"Removing Bindings",id:"removing-bindings",level:3},{value:"Checking if a Binding Exists",id:"checking-if-a-binding-exists",level:3},{value:"Finding Bindings",id:"finding-bindings",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"binding",children:"Binding"})}),"\n",(0,t.jsx)(e.h2,{id:"what-is-a-binding",children:"What is a Binding?"}),"\n",(0,t.jsx)(e.p,{children:"A Binding is a connection between a key and a value in the Context. It's the fundamental building block of the dependency injection system in Contexify."}),"\n",(0,t.jsx)(e.p,{children:"Bindings allow you to:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Register values, classes, or factory functions in the Context"}),"\n",(0,t.jsx)(e.li,{children:"Control the lifecycle of dependencies"}),"\n",(0,t.jsx)(e.li,{children:"Tag bindings for discovery and grouping"}),"\n",(0,t.jsx)(e.li,{children:"Configure how dependencies are resolved"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"binding-keys",children:"Binding Keys"}),"\n",(0,t.jsx)(e.p,{children:"Binding keys are unique identifiers used to look up values in the Context. They are typically strings that follow a naming convention."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context();\n\n// Using a simple string as a binding key\ncontext.bind('greeting').to('Hello, world!');\n\n// Using a namespaced key (recommended)\ncontext.bind('services.UserService').toClass(UserService);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsx)(e.p,{children:"It's recommended to use a consistent naming convention for binding keys. Here are some common patterns:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"{namespace}.{name}"}),": Use namespace and name (e.g., ",(0,t.jsx)(e.code,{children:"services.UserService"}),")"]}),"\n",(0,t.jsxs)(e.li,{children:["Use plural forms for namespaces (e.g., ",(0,t.jsx)(e.code,{children:"services"}),", ",(0,t.jsx)(e.code,{children:"repositories"}),", ",(0,t.jsx)(e.code,{children:"controllers"}),")"]}),"\n",(0,t.jsxs)(e.li,{children:["For configurations, use ",(0,t.jsx)(e.code,{children:"config.{component}"})," (e.g., ",(0,t.jsx)(e.code,{children:"config.api"}),")"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"binding-types",children:"Binding Types"}),"\n",(0,t.jsx)(e.p,{children:"Contexify supports several types of bindings:"}),"\n",(0,t.jsx)(e.h3,{id:"value-binding",children:"Value Binding"}),"\n",(0,t.jsx)(e.p,{children:"Bind a constant value to a key."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// Bind a string\ncontext.bind('greeting').to('Hello, world!');\n\n// Bind a number\ncontext.bind('config.port').to(3000);\n\n// Bind an object\ncontext.bind('config.database').to({\n  host: 'localhost',\n  port: 5432,\n  username: 'admin'\n});\n"})}),"\n",(0,t.jsx)(e.h3,{id:"class-binding",children:"Class Binding"}),"\n",(0,t.jsx)(e.p,{children:"Bind a class constructor to a key. The class will be instantiated when the binding is resolved."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context, injectable } from 'contexify';\n\n@injectable()\nclass UserService {\n  getUsers() {\n    return ['user1', 'user2'];\n  }\n}\n\nconst context = new Context();\ncontext.bind('services.UserService').toClass(UserService);\n\n// Later, when resolved\nconst userService = await context.get('services.UserService');\nconsole.log(userService.getUsers()); // ['user1', 'user2']\n"})}),"\n",(0,t.jsx)(e.h3,{id:"factory-function-binding",children:"Factory Function Binding"}),"\n",(0,t.jsx)(e.p,{children:"Bind a factory function that creates the value when the binding is resolved."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"context.bind('services.DbConnection').toDynamicValue(() => {\n  // This function is called when the binding is resolved\n  return createDbConnection();\n});\n"})}),"\n",(0,t.jsx)(e.h3,{id:"provider-binding",children:"Provider Binding"}),"\n",(0,t.jsx)(e.p,{children:"Bind a provider class that creates the value when the binding is resolved."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context, Provider, injectable } from 'contexify';\n\n@injectable()\nclass DbConnectionProvider implements Provider<DbConnection> {\n  constructor(@inject('config.database') private config: DbConfig) {}\n\n  value() {\n    // This method is called when the binding is resolved\n    return createDbConnection(this.config);\n  }\n}\n\ncontext.bind('services.DbConnection').toProvider(DbConnectionProvider);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"binding-scopes",children:"Binding Scopes"}),"\n",(0,t.jsx)(e.p,{children:"Binding scopes control the lifecycle of the resolved values."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context, BindingScope } from 'contexify';\n\nconst context = new Context();\n\n// Singleton: One instance for the entire application\ncontext\n  .bind('services.ConfigService')\n  .toClass(ConfigService)\n  .inScope(BindingScope.SINGLETON);\n\n// Transient: New instance each time it's resolved\ncontext\n  .bind('services.RequestHandler')\n  .toClass(RequestHandler)\n  .inScope(BindingScope.TRANSIENT);\n\n// Context: One instance per context\ncontext\n  .bind('services.CacheService')\n  .toClass(CacheService)\n  .inScope(BindingScope.CONTEXT);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"scope-guidelines",children:"Scope Guidelines"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"SINGLETON"}),": For services with shared state (configurations, database connections)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"TRANSIENT"}),": For components that need a new instance each time they're used"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"CONTEXT"}),": For components shared within a specific context"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"binding-tags",children:"Binding Tags"}),"\n",(0,t.jsx)(e.p,{children:"Tags allow you to categorize and discover bindings."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context();\n\n// Add tags to a binding\ncontext\n  .bind('controllers.UserController')\n  .toClass(UserController)\n  .tag('controller', 'rest');\n\n// Find bindings by tag\nasync function findControllers() {\n  const controllerBindings = await context.findByTag('controller');\n  return controllerBindings;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"binding-configuration",children:"Binding Configuration"}),"\n",(0,t.jsx)(e.p,{children:"You can configure bindings with additional metadata."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context();\n\n// Configure a binding\ncontext\n  .bind('services.EmailService')\n  .toClass(EmailService)\n  .tag('service')\n  .inScope(BindingScope.SINGLETON)\n  .configure(binding => {\n    binding.description = 'Email service for sending notifications';\n  });\n"})}),"\n",(0,t.jsx)(e.h2,{id:"creating-and-managing-bindings",children:"Creating and Managing Bindings"}),"\n",(0,t.jsx)(e.h3,{id:"adding-bindings",children:"Adding Bindings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { Context, Binding } from 'contexify';\n\nconst context = new Context();\n\n// Using the bind method\ncontext.bind('greeting').to('Hello, world!');\n\n// Creating a binding first and then adding it\nconst binding = Binding.create('services.UserService')\n  .toClass(UserService)\n  .tag('service');\n\ncontext.add(binding);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"removing-bindings",children:"Removing Bindings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// Remove a binding\ncontext.unbind('greeting');\n"})}),"\n",(0,t.jsx)(e.h3,{id:"checking-if-a-binding-exists",children:"Checking if a Binding Exists"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// Check if a binding exists\nconst exists = context.contains('greeting');\nconsole.log(exists); // true or false\n"})}),"\n",(0,t.jsx)(e.h3,{id:"finding-bindings",children:"Finding Bindings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// Find bindings by tag\nconst serviceBindings = await context.findByTag('service');\n\n// Find bindings by key pattern\nconst userBindings = await context.find(/^services\\.User/);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(e.p,{children:"Now that you understand Bindings, you can learn about:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"./dependency-injection",children:"Dependency Injection"})," - How to inject dependencies into your classes"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"./context",children:"Context"})," - The container for bindings"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"../api/overview",children:"API Reference"})," - View the detailed API documentation"]}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}}}]);