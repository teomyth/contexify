"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[559],{991:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(4700);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},4503:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/overview","title":"API Overview","description":"This section provides a comprehensive reference for the Contexify API. Each class, method, and interface is documented in detail with examples to help you understand how to use them effectively.","source":"@site/docs/api/overview.md","sourceDirName":"api","slug":"/api/overview","permalink":"/contexify/docs/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Documentation Development Guide","permalink":"/contexify/docs/guides/documentation"},"next":{"title":"Context","permalink":"/contexify/docs/api/context"}}');var s=i(7968),r=i(991);const o={sidebar_position:1},c="API Overview",a={},d=[{value:"Core Classes",id:"core-classes",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Interfaces and Types",id:"interfaces-and-types",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Related Resources",id:"related-resources",level:2},{value:"For More Information",id:"for-more-information",level:2}];function l(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api-overview",children:"API Overview"})}),"\n",(0,s.jsx)(n.p,{children:"This section provides a comprehensive reference for the Contexify API. Each class, method, and interface is documented in detail with examples to help you understand how to use them effectively."}),"\n",(0,s.jsx)(n.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,s.jsx)(n.p,{children:"Contextify is built around a few core classes that provide the foundation for dependency injection:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/context",children:"Context"})," - The central registry for bindings and dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/binding",children:"Binding"})," - Represents a connection between a key and a value"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/context-view",children:"ContextView"})," - Tracks a set of bindings that match a specific filter"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,s.jsx)(n.p,{children:"Contextify provides a set of decorators that make it easy to work with dependency injection in TypeScript:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#injectable",children:"@injectable()"})," - Marks a class as injectable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#inject",children:"@inject()"})," - Injects a dependency by its binding key"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#injecttag",children:"@inject.tag()"})," - Injects all dependencies that match a specific tag"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#injectgetter",children:"@inject.getter()"})," - Injects a function that can be used to get the dependency later"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#injectview",children:"@inject.view()"})," - Injects a ContextView that tracks bindings matching a filter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#config",children:"@config()"})," - Injects configuration for the current binding"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/decorators#intercept",children:"@intercept()"})," - Applies interceptors to a method or class"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"interfaces-and-types",children:"Interfaces and Types"}),"\n",(0,s.jsx)(n.p,{children:"Contextify defines several interfaces and types that are used throughout the framework:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#provider",children:"Provider"})," - Defines a class that can create values dynamically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#interceptor",children:"Interceptor"})," - Defines a class that can intercept method calls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#contextobserver",children:"ContextObserver"})," - Defines a class that can observe context events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#invocationcontext",children:"InvocationContext"})," - Provides information about a method invocation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#bindingscope",children:"BindingScope"})," - Defines the scope of a binding"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#constructor",children:"Constructor"})," - Represents a class constructor"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#valueorpromise",children:"ValueOrPromise"})," - Represents a value or a promise of a value"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#getter",children:"Getter"})," - Represents a function that returns a value or a promise of a value"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#bindingfilter",children:"BindingFilter"})," - Represents a function that filters bindings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/contexify/docs/api/interfaces#bindingcomparator",children:"BindingComparator"})," - Represents a function that compares bindings"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsxs)(n.p,{children:["For practical examples of using the Contexify API, see the ",(0,s.jsx)(n.a,{href:"/contexify/docs/api/usage-examples",children:"API Usage Examples"})," page. This page provides a variety of examples that demonstrate how to use the API in real-world scenarios."]}),"\n",(0,s.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,s.jsxs)(n.p,{children:["To learn how to use Contexify effectively in your applications, see the ",(0,s.jsx)(n.a,{href:"/docs/best-practices",children:"Best Practices"})," section. This section provides guidance on application architecture, dependency injection, and advanced patterns."]}),"\n",(0,s.jsx)(n.h2,{id:"for-more-information",children:"For More Information"}),"\n",(0,s.jsxs)(n.p,{children:["For more detailed information about the API, please refer to the TypeScript definitions in the source code or check out the example code in the ",(0,s.jsx)(n.a,{href:"https://github.com/teomyth/contexify",children:"GitHub repository"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);