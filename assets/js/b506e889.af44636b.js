"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[564],{1195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/usage-examples","title":"API Usage Examples","description":"This section provides examples of using the Contexify API to help you better understand how to use these APIs in real applications.","source":"@site/docs/api/usage-examples.md","sourceDirName":"api","slug":"/api/usage-examples","permalink":"/contexify/docs/api/usage-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/usage-examples.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Interfaces and Types","permalink":"/contexify/docs/api/interfaces"},"next":{"title":"Examples","permalink":"/contexify/docs/category/examples"}}');var s=t(7968),r=t(9880);const a={sidebar_position:6},c="API Usage Examples",o={},l=[{value:"Context Class Examples",id:"context-class-examples",level:2},{value:"Creating Contexts",id:"creating-contexts",level:3},{value:"Binding and Resolving Values",id:"binding-and-resolving-values",level:3},{value:"Binding Classes",id:"binding-classes",level:3},{value:"Using Dynamic Values",id:"using-dynamic-values",level:3},{value:"Using Providers",id:"using-providers",level:3},{value:"Using Aliases",id:"using-aliases",level:3},{value:"Setting Binding Scope",id:"setting-binding-scope",level:3},{value:"Using Tags",id:"using-tags",level:3},{value:"Using Context Views",id:"using-context-views",level:3},{value:"Decorator Examples",id:"decorator-examples",level:2},{value:"@injectable() Decorator",id:"injectable-decorator",level:3},{value:"@inject() Decorator",id:"inject-decorator",level:3},{value:"@inject.tag() Decorator",id:"injecttag-decorator",level:3},{value:"@inject.getter() Decorator",id:"injectgetter-decorator",level:3},{value:"@inject.view() Decorator",id:"injectview-decorator",level:3},{value:"@config() Decorator",id:"config-decorator",level:3},{value:"@intercept() Decorator",id:"intercept-decorator",level:3},{value:"Interface Examples",id:"interface-examples",level:2},{value:"Provider Interface",id:"provider-interface",level:3},{value:"Interceptor Interface",id:"interceptor-interface",level:3},{value:"ContextObserver Interface",id:"contextobserver-interface",level:3},{value:"More Examples",id:"more-examples",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api-usage-examples",children:"API Usage Examples"})}),"\n",(0,s.jsx)(n.p,{children:"This section provides examples of using the Contexify API to help you better understand how to use these APIs in real applications."}),"\n",(0,s.jsx)(n.h2,{id:"context-class-examples",children:"Context Class Examples"}),"\n",(0,s.jsx)(n.h3,{id:"creating-contexts",children:"Creating Contexts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Create a root context\nconst rootContext = new Context('root');\n\n// Create a child context\nconst childContext = new Context(rootContext, 'child');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"binding-and-resolving-values",children:"Binding and Resolving Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Bind a simple value\ncontext.bind('greeting').to('Hello, world!');\n\n// Resolve the value asynchronously\nconst greeting = await context.get<string>('greeting');\nconsole.log(greeting); // Output: Hello, world!\n\n// Resolve the value synchronously (if possible)\nconst greetingSync = context.getSync<string>('greeting');\nconsole.log(greetingSync); // Output: Hello, world!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"binding-classes",children:"Binding Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass GreetingService {\n  sayHello(name: string) {\n    return `Hello, ${name}!`;\n  }\n}\n\n// Bind the class\ncontext.bind('services.GreetingService').toClass(GreetingService);\n\n// Resolve the class instance\nconst greetingService = await context.get<GreetingService>('services.GreetingService');\nconsole.log(greetingService.sayHello('John')); // Output: Hello, John!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-dynamic-values",children:"Using Dynamic Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Bind a dynamic value\ncontext.bind('currentTime').toDynamicValue(() => new Date().toISOString());\n\n// Each resolution gets a new value\nconst time1 = await context.get<string>('currentTime');\n// Wait for some time\nconst time2 = await context.get<string>('currentTime');\nconsole.log(time1 !== time2); // Output: true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-providers",children:"Using Providers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass TimeProvider implements Provider<string> {\n  value() {\n    return new Date().toISOString();\n  }\n}\n\n// Bind the provider\ncontext.bind('currentTime').toProvider(TimeProvider);\n\n// Resolve the value\nconst time = await context.get<string>('currentTime');\nconsole.log(time); // Outputs the current time\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-aliases",children:"Using Aliases"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Bind a value\ncontext.bind('config.apiUrl').to('https://api.example.com');\n\n// Create an alias\ncontext.bind('apiUrl').toAlias('config.apiUrl');\n\n// Resolve through the alias\nconst apiUrl = await context.get<string>('apiUrl');\nconsole.log(apiUrl); // Output: https://api.example.com\n"})}),"\n",(0,s.jsx)(n.h3,{id:"setting-binding-scope",children:"Setting Binding Scope"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Singleton scope (default)\ncontext.bind('singleton').to(new Date()).inScope(BindingScope.SINGLETON);\n\n// Transient scope (new instance for each resolution)\ncontext.bind('transient').toDynamicValue(() => new Date()).inScope(BindingScope.TRANSIENT);\n\n// Context scope (instance shared within the same context)\ncontext.bind('contextScoped').toDynamicValue(() => new Date()).inScope(BindingScope.CONTEXT);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-tags",children:"Using Tags"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Add tags\ncontext.bind('service.user').toClass(UserService).tag('service');\ncontext.bind('service.order').toClass(OrderService).tag('service');\ncontext.bind('service.payment').toClass(PaymentService).tag('service');\n\n// Find bindings by tag\nconst serviceBindings = await context.findByTag('service');\nconsole.log(serviceBindings.length); // Output: 3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-context-views",children:"Using Context Views"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Create a view that tracks all bindings with the 'service' tag\nconst serviceView = context.createView<any>(binding => binding.tags.has('service'));\n\n// Get all matching bindings\nconst bindings = serviceView.bindings();\nconsole.log(bindings.length); // Output: 3\n\n// Resolve all matching values\nconst services = await serviceView.resolve();\nconsole.log(services.length); // Output: 3\n"})}),"\n",(0,s.jsx)(n.h2,{id:"decorator-examples",children:"Decorator Examples"}),"\n",(0,s.jsx)(n.h3,{id:"injectable-decorator",children:"@injectable() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass UserService {\n  constructor() {\n    console.log('UserService created');\n  }\n\n  getUsers() {\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n// Now UserService can be created through Context\ncontext.bind('services.UserService').toClass(UserService);\nconst userService = await context.get<UserService>('services.UserService');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"inject-decorator",children:"@inject() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass UserRepository {\n  findAll() {\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n@injectable()\nclass UserService {\n  constructor(@inject('repositories.UserRepository') private userRepo: UserRepository) {}\n\n  getUsers() {\n    return this.userRepo.findAll();\n  }\n}\n\n// Bind dependencies\ncontext.bind('repositories.UserRepository').toClass(UserRepository);\ncontext.bind('services.UserService').toClass(UserService);\n\n// Resolve UserService (UserRepository is automatically injected)\nconst userService = await context.get<UserService>('services.UserService');\nconsole.log(userService.getUsers()); // Output: ['user1', 'user2', 'user3']\n"})}),"\n",(0,s.jsx)(n.h3,{id:"injecttag-decorator",children:"@inject.tag() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass Logger {\n  constructor(private name: string) {}\n\n  log(message: string) {\n    console.log(`[${this.name}] ${message}`);\n  }\n}\n\n@injectable()\nclass Application {\n  constructor(@inject.tag('logger') private loggers: Logger[]) {}\n\n  run() {\n    this.loggers.forEach(logger => logger.log('Application started'));\n  }\n}\n\n// Bind multiple services with the same tag\ncontext.bind('loggers.console').toClass(Logger).tag('logger').to(new Logger('console'));\ncontext.bind('loggers.file').toClass(Logger).tag('logger').to(new Logger('file'));\ncontext.bind('app').toClass(Application);\n\n// Resolve the application (all services with the 'logger' tag are automatically injected)\nconst app = await context.get<Application>('app');\napp.run();\n// Output:\n// [console] Application started\n// [file] Application started\n"})}),"\n",(0,s.jsx)(n.h3,{id:"injectgetter-decorator",children:"@inject.getter() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass ConfigService {\n  constructor(@inject.getter('config.database') private getDbConfig: Getter<any>) {}\n\n  async connectToDatabase() {\n    // Get the configuration only when needed\n    const dbConfig = await this.getDbConfig();\n    console.log(`Connecting to ${dbConfig.host}:${dbConfig.port}`);\n  }\n}\n\n// Bind configuration\ncontext.bind('config.database').to({\n  host: 'localhost',\n  port: 5432,\n  username: 'admin',\n  password: 'secret'\n});\n\ncontext.bind('services.ConfigService').toClass(ConfigService);\n\n// Resolve the service\nconst configService = await context.get<ConfigService>('services.ConfigService');\nawait configService.connectToDatabase(); // Output: Connecting to localhost:5432\n"})}),"\n",(0,s.jsx)(n.h3,{id:"injectview-decorator",children:"@inject.view() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass Plugin {\n  constructor(public name: string) {}\n\n  initialize() {\n    console.log(`Plugin ${this.name} initialized`);\n  }\n}\n\n@injectable()\nclass PluginManager {\n  constructor(\n    @inject.view(binding => binding.tags.has('plugin'))\n    private pluginView: ContextView<Plugin>\n  ) {}\n\n  async initializePlugins() {\n    const plugins = await this.pluginView.resolve();\n    plugins.forEach(plugin => plugin.initialize());\n  }\n}\n\n// Bind plugins and manager\ncontext.bind('plugins.logger').to(new Plugin('logger')).tag('plugin');\ncontext.bind('plugins.auth').to(new Plugin('auth')).tag('plugin');\ncontext.bind('plugins.cache').to(new Plugin('cache')).tag('plugin');\ncontext.bind('managers.PluginManager').toClass(PluginManager);\n\n// Resolve manager and initialize plugins\nconst pluginManager = await context.get<PluginManager>('managers.PluginManager');\nawait pluginManager.initializePlugins();\n// Output:\n// Plugin logger initialized\n// Plugin auth initialized\n// Plugin cache initialized\n"})}),"\n",(0,s.jsx)(n.h3,{id:"config-decorator",children:"@config() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass DatabaseService {\n  constructor(\n    @config('database.host') private host: string,\n    @config('database.port') private port: number\n  ) {}\n\n  connect() {\n    console.log(`Connecting to database at ${this.host}:${this.port}`);\n  }\n}\n\n// Bind configuration\ncontext.configure('services.DatabaseService').to({\n  database: {\n    host: 'localhost',\n    port: 5432\n  }\n});\n\ncontext.bind('services.DatabaseService').toClass(DatabaseService);\n\n// Resolve the service\nconst dbService = await context.get<DatabaseService>('services.DatabaseService');\ndbService.connect(); // Output: Connecting to database at localhost:5432\n"})}),"\n",(0,s.jsx)(n.h3,{id:"intercept-decorator",children:"@intercept() Decorator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Define an interceptor\nclass LoggingInterceptor implements Interceptor {\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>) {\n    console.log(`Calling ${invocationCtx.methodName} with args:`, invocationCtx.args);\n    const start = Date.now();\n    const result = next();\n\n    if (result instanceof Promise) {\n      return result.then(value => {\n        console.log(`${invocationCtx.methodName} completed in ${Date.now() - start}ms`);\n        return value;\n      });\n    }\n\n    console.log(`${invocationCtx.methodName} completed in ${Date.now() - start}ms`);\n    return result;\n  }\n}\n\n// Use the interceptor\n@injectable()\nclass UserService {\n  @intercept(new LoggingInterceptor())\n  async findUsers() {\n    // Simulate database query\n    await new Promise(resolve => setTimeout(resolve, 100));\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n// Bind the service\ncontext.bind('services.UserService').toClass(UserService);\n\n// Resolve the service and call the method\nconst userService = await context.get<UserService>('services.UserService');\nconst users = await userService.findUsers();\n// Output:\n// Calling findUsers with args: []\n// findUsers completed in 100ms\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interface-examples",children:"Interface Examples"}),"\n",(0,s.jsx)(n.h3,{id:"provider-interface",children:"Provider Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass RandomNumberProvider implements Provider<number> {\n  value() {\n    return Math.random();\n  }\n}\n\n// Bind the provider\ncontext.bind('random').toProvider(RandomNumberProvider);\n\n// Resolve values\nconst random1 = await context.get<number>('random');\nconst random2 = await context.get<number>('random');\nconsole.log(random1 !== random2); // Output: true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"interceptor-interface",children:"Interceptor Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Define a caching interceptor\nclass CachingInterceptor implements Interceptor {\n  private cache = new Map<string, any>();\n\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>) {\n    const cacheKey = `${invocationCtx.targetClass.name}.${invocationCtx.methodName}(${JSON.stringify(invocationCtx.args)})`;\n\n    if (this.cache.has(cacheKey)) {\n      console.log(`Cache hit for ${cacheKey}`);\n      return this.cache.get(cacheKey);\n    }\n\n    console.log(`Cache miss for ${cacheKey}`);\n    const result = next();\n\n    if (result instanceof Promise) {\n      return result.then(value => {\n        this.cache.set(cacheKey, value);\n        return value;\n      });\n    }\n\n    this.cache.set(cacheKey, result);\n    return result;\n  }\n}\n\n// Use the caching interceptor\n@injectable()\nclass ExpensiveService {\n  @intercept(new CachingInterceptor())\n  async computeExpensiveValue(input: string) {\n    console.log(`Computing expensive value for ${input}`);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return `Result for ${input}`;\n  }\n}\n\n// Bind the service\ncontext.bind('services.ExpensiveService').toClass(ExpensiveService);\n\n// Resolve the service and call the method\nconst expensiveService = await context.get<ExpensiveService>('services.ExpensiveService');\n\n// First call (cache miss)\nlet result1 = await expensiveService.computeExpensiveValue('test');\nconsole.log(result1); // Output: Result for test\n\n// Second call (cache hit)\nlet result2 = await expensiveService.computeExpensiveValue('test');\nconsole.log(result2); // Output: Result for test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contextobserver-interface",children:"ContextObserver Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Define an observer\nclass BindingObserver implements ContextObserver {\n  // Only observe bindings with the 'service' tag\n  filter = (binding: Readonly<Binding<unknown>>) => binding.tags.has('service');\n\n  observe(eventType: string, binding: Readonly<Binding<unknown>>, context: Context) {\n    console.log(`Event: ${eventType}, Binding: ${binding.key}`);\n  }\n}\n\n// Create a context and subscribe the observer\nconst context = new Context('app');\ncontext.subscribe(new BindingObserver());\n\n// Add a binding (will trigger the observer)\ncontext.bind('services.UserService').toClass(UserService).tag('service');\n// Output: Event: bind, Binding: services.UserService\n\n// Resolve the binding (will trigger the observer)\nawait context.get('services.UserService');\n// Output: Event: resolve:before, Binding: services.UserService\n// Output: Event: resolve:after, Binding: services.UserService\n"})}),"\n",(0,s.jsx)(n.h2,{id:"more-examples",children:"More Examples"}),"\n",(0,s.jsxs)(n.p,{children:["For more examples, see the ",(0,s.jsx)(n.a,{href:"/contexify/docs/examples/basic-example",children:"Examples"})," section or check out the example code in the ",(0,s.jsx)(n.a,{href:"https://github.com/teomyth/contexify",children:"GitHub repository"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},9880:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(4700);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);