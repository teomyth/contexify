"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[237],{3279:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/context","title":"Context","description":"The Context class is the core of the Contexify framework. It serves as a registry for bindings and provides methods for managing dependencies.","source":"@site/docs/api/context.md","sourceDirName":"api","slug":"/api/context","permalink":"/contexify/docs/api/context","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/context.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"API Overview","permalink":"/contexify/docs/api/overview"},"next":{"title":"Binding","permalink":"/contexify/docs/api/binding"}}');var r=s(7968),t=s(9880);const c={sidebar_position:1},l="Context",o={},d=[{value:"Constructor",id:"constructor",level:2},{value:"constructor",id:"constructor-1",level:3},{value:"Binding Methods",id:"binding-methods",level:2},{value:"bind",id:"bind",level:3},{value:"add",id:"add",level:3},{value:"unbind",id:"unbind",level:3},{value:"contains",id:"contains",level:3},{value:"Resolution Methods",id:"resolution-methods",level:2},{value:"get",id:"get",level:3},{value:"getSync",id:"getsync",level:3},{value:"getBinding",id:"getbinding",level:3},{value:"find",id:"find",level:3},{value:"findByTag",id:"findbytag",level:3},{value:"Configuration Methods",id:"configuration-methods",level:2},{value:"configure",id:"configure",level:3},{value:"getConfig",id:"getconfig",level:3},{value:"Context View Methods",id:"context-view-methods",level:2},{value:"createView",id:"createview",level:3},{value:"Observer Methods",id:"observer-methods",level:2},{value:"subscribe",id:"subscribe",level:3},{value:"unsubscribe",id:"unsubscribe",level:3},{value:"Event Methods",id:"event-methods",level:2},{value:"on",id:"on",level:3},{value:"once",id:"once",level:3},{value:"off",id:"off",level:3},{value:"Lifecycle Methods",id:"lifecycle-methods",level:2},{value:"close",id:"close",level:3},{value:"Events",id:"events",level:2},{value:"Complete Example",id:"complete-example",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"context",children:"Context"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Context"})," class is the core of the Contexify framework. It serves as a registry for bindings and provides methods for managing dependencies."]}),"\n",(0,r.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,r.jsx)(n.p,{children:"Creates a new Context instance."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"constructor(parent?: Context, name?: string)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parent"})," (optional): A parent Context. If provided, this Context will inherit bindings from the parent."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (optional): A name for this Context. Useful for debugging."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A new Context instance."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a root context\nconst rootContext = new Context('root');\n\n// Create a child context\nconst childContext = new Context(rootContext, 'child');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"binding-methods",children:"Binding Methods"}),"\n",(0,r.jsx)(n.h3,{id:"bind",children:"bind"}),"\n",(0,r.jsx)(n.p,{children:"Creates a new Binding with the given key and adds it to the Context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"bind(key: string): Binding\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key. This is a string that uniquely identifies the binding within the Context."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A new Binding instance."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a binding for a simple value\nconst binding = context.bind('greeting');\nbinding.to('Hello, world!');\n\n// Create a binding for a class\ncontext.bind('services.UserService').toClass(UserService);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"add",children:"add"}),"\n",(0,r.jsx)(n.p,{children:"Adds an existing Binding to the Context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"add(binding: Binding): this\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"binding"}),": The Binding to add."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The Context instance (for method chaining)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a binding\nconst binding = Binding.create('greeting');\nbinding.to('Hello, world!');\n\n// Add the binding to the context\ncontext.add(binding);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unbind",children:"unbind"}),"\n",(0,r.jsx)(n.p,{children:"Removes a Binding from the Context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"unbind(key: string): boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to remove."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"true"})," if the binding was found and removed, ",(0,r.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Remove a binding\nconst wasRemoved = context.unbind('greeting');\nconsole.log(wasRemoved); // true or false\n"})}),"\n",(0,r.jsx)(n.h3,{id:"contains",children:"contains"}),"\n",(0,r.jsx)(n.p,{children:"Checks if the Context contains a Binding with the given key."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"contains(key: string): boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to check."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"true"})," if the binding exists, ",(0,r.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Check if a binding exists\nconst exists = context.contains('greeting');\nconsole.log(exists); // true or false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"resolution-methods",children:"Resolution Methods"}),"\n",(0,r.jsx)(n.h3,{id:"get",children:"get"}),"\n",(0,r.jsx)(n.p,{children:"Resolves a value from the Context asynchronously."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"get<T>(key: string, options?: ResolutionOptions): Promise<T>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to resolve."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the resolution process."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A Promise that resolves to the value."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Resolve a value asynchronously\nconst greeting = await context.get<string>('greeting');\nconsole.log(greeting); // Hello, world!\n\n// Resolve a service\nconst userService = await context.get<UserService>('services.UserService');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getsync",children:"getSync"}),"\n",(0,r.jsx)(n.p,{children:"Resolves a value from the Context synchronously."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"getSync<T>(key: string, options?: ResolutionOptions): T\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to resolve."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the resolution process."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The resolved value."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Throws:"})," If the value cannot be resolved synchronously (e.g., if it involves async operations)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Resolve a value synchronously\nconst greeting = context.getSync<string>('greeting');\nconsole.log(greeting); // Hello, world!\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getbinding",children:"getBinding"}),"\n",(0,r.jsx)(n.p,{children:"Gets a Binding from the Context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"getBinding(key: string): Binding | undefined\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to get."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The Binding if found, ",(0,r.jsx)(n.code,{children:"undefined"})," otherwise."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Get a binding\nconst binding = context.getBinding('greeting');\nif (binding) {\n  console.log('Binding found!');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"find",children:"find"}),"\n",(0,r.jsx)(n.p,{children:"Finds all Bindings that match the given pattern."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"find(pattern: string | RegExp): Promise<Binding[]>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pattern"}),": A string or RegExp pattern to match against binding keys."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A Promise that resolves to an array of matching Bindings."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Find all bindings that match a pattern\nconst serviceBindings = await context.find(/^services\\./);\nconsole.log(`Found ${serviceBindings.length} service bindings`);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"findbytag",children:"findByTag"}),"\n",(0,r.jsx)(n.p,{children:"Finds all Bindings that have the given tag."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"findByTag(tag: string): Promise<Binding[]>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tag"}),": The tag to search for."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A Promise that resolves to an array of matching Bindings."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Find all bindings with a specific tag\nconst serviceBindings = await context.findByTag('service');\nconsole.log(`Found ${serviceBindings.length} service bindings`);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-methods",children:"Configuration Methods"}),"\n",(0,r.jsx)(n.h3,{id:"configure",children:"configure"}),"\n",(0,r.jsx)(n.p,{children:"Creates a configuration binding for the given key."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"configure(key: string): Binding\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to configure."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A new Binding instance for the configuration."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Configure a service\ncontext.configure('services.EmailService').to({\n  host: 'smtp.example.com',\n  port: 587,\n  secure: true,\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getconfig",children:"getConfig"}),"\n",(0,r.jsx)(n.p,{children:"Gets the configuration for a binding."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"getConfig<T>(key: string, options?: ResolutionOptions): Promise<T>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The binding key to get the configuration for."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the resolution process."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A Promise that resolves to the configuration value."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Get configuration for a service\nconst emailConfig = await context.getConfig<EmailConfig>('services.EmailService');\nconsole.log(emailConfig.host); // smtp.example.com\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-view-methods",children:"Context View Methods"}),"\n",(0,r.jsx)(n.h3,{id:"createview",children:"createView"}),"\n",(0,r.jsx)(n.p,{children:"Creates a ContextView that tracks bindings matching the given filter."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"createView<T>(filter: BindingFilter, comparator?: BindingComparator): ContextView<T>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": A function that filters bindings."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"comparator"})," (optional): A function that compares bindings for sorting."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," A new ContextView instance."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a view of all service bindings\nconst serviceView = context.createView<any>(\n  binding => binding.tags.has('service'),\n  (a, b) => a.key.localeCompare(b.key)\n);\n\n// Get all services\nconst services = await serviceView.resolve();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"observer-methods",children:"Observer Methods"}),"\n",(0,r.jsx)(n.h3,{id:"subscribe",children:"subscribe"}),"\n",(0,r.jsx)(n.p,{children:"Subscribes an observer to context events."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"subscribe(observer: ContextEventObserver): this\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"observer"}),": The observer to subscribe."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The Context instance (for method chaining)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create an observer\nclass ServiceObserver implements ContextObserver {\n  filter = binding => binding.tags.has('service');\n\n  observe(event: string, binding: Binding) {\n    console.log(`Service event: ${event}, binding: ${binding.key}`);\n  }\n}\n\n// Subscribe the observer\ncontext.subscribe(new ServiceObserver());\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unsubscribe",children:"unsubscribe"}),"\n",(0,r.jsx)(n.p,{children:"Unsubscribes an observer from context events."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"unsubscribe(observer: ContextEventObserver): boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"observer"}),": The observer to unsubscribe."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:"true"})," if the observer was found and removed, ",(0,r.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create an observer\nconst observer = new ServiceObserver();\n\n// Subscribe the observer\ncontext.subscribe(observer);\n\n// Later, unsubscribe the observer\nconst wasRemoved = context.unsubscribe(observer);\nconsole.log(wasRemoved); // true or false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"event-methods",children:"Event Methods"}),"\n",(0,r.jsx)(n.h3,{id:"on",children:"on"}),"\n",(0,r.jsx)(n.p,{children:"Adds an event listener for the given event."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"on(event: string, listener: ContextEventListener): this\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"event"}),": The event name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"listener"}),": The event listener function."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The Context instance (for method chaining)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Listen for bind events\ncontext.on('bind', (binding, context) => {\n  console.log(`Binding added: ${binding.key}`);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"once",children:"once"}),"\n",(0,r.jsx)(n.p,{children:"Adds a one-time event listener for the given event."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"once(event: string, listener: ContextEventListener): this\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"event"}),": The event name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"listener"}),": The event listener function."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The Context instance (for method chaining)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Listen for the next bind event only\ncontext.once('bind', (binding, context) => {\n  console.log(`Binding added: ${binding.key}`);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"off",children:"off"}),"\n",(0,r.jsx)(n.p,{children:"Removes an event listener for the given event."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"off(event: string, listener: ContextEventListener): this\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"event"}),": The event name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"listener"}),": The event listener function to remove."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns:"})," The Context instance (for method chaining)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a listener\nconst listener = (binding, context) => {\n  console.log(`Binding added: ${binding.key}`);\n};\n\n// Add the listener\ncontext.on('bind', listener);\n\n// Later, remove the listener\ncontext.off('bind', listener);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"lifecycle-methods",children:"Lifecycle Methods"}),"\n",(0,r.jsx)(n.h3,{id:"close",children:"close"}),"\n",(0,r.jsx)(n.p,{children:"Closes the Context, releasing all resources and removing all bindings."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"close(): void\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Close the context when done\ncontext.close();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,r.jsx)(n.p,{children:"The Context class emits the following events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bind"}),": Emitted when a binding is added to the context."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"unbind"}),": Emitted when a binding is removed from the context."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resolve:before"}),": Emitted before a binding is resolved."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resolve:after"}),": Emitted after a binding is resolved."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"}),": Emitted when an error occurs during resolution."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example showing how to use the Context class:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, injectable, inject } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Define a logger service\n@injectable()\nclass LoggerService {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n// Define a user service that depends on the logger\n@injectable()\nclass UserService {\n  constructor(@inject('services.LoggerService') private logger: LoggerService) {}\n\n  createUser(name: string) {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n\n// Bind the services to the context\ncontext.bind('services.LoggerService').toClass(LoggerService);\ncontext.bind('services.UserService').toClass(UserService);\n\n// Subscribe to events\ncontext.on('bind', (binding) => {\n  console.log(`Binding added: ${binding.key}`);\n});\n\n// Use the services\nasync function run() {\n  // Resolve the UserService from the context\n  const userService = await context.get<UserService>('services.UserService');\n\n  // Create a user\n  const user = userService.createUser('John');\n  console.log('Created user:', user);\n\n  // Close the context when done\n  context.close();\n}\n\nrun().catch(err => console.error(err));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},9880:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(4700);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);