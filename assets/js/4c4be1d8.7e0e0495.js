"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[680],{991:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(4700);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},8011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>x,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"core-concepts/observers","title":"Observers and Events","description":"What are Context Events?","source":"@site/docs/core-concepts/observers.md","sourceDirName":"core-concepts","slug":"/core-concepts/observers","permalink":"/contexify/docs/core-concepts/observers","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/core-concepts/observers.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Interceptors","permalink":"/contexify/docs/core-concepts/interceptors"},"next":{"title":"Examples","permalink":"/contexify/docs/category/examples"}}');var s=t(7968),i=t(991);const o={sidebar_position:5},c="Observers and Events",l={},d=[{value:"What are Context Events?",id:"what-are-context-events",level:2},{value:"Context Event Listeners",id:"context-event-listeners",level:2},{value:"What are Context Observers?",id:"what-are-context-observers",level:2},{value:"Creating and Using Context Observers",id:"creating-and-using-context-observers",level:2},{value:"Observer Function",id:"observer-function",level:2},{value:"Context Views",id:"context-views",level:2},{value:"Context View Events",id:"context-view-events",level:3},{value:"Observer Error Handling",id:"observer-error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"observers-and-events",children:"Observers and Events"})}),"\n",(0,s.jsx)(n.h2,{id:"what-are-context-events",children:"What are Context Events?"}),"\n",(0,s.jsx)(n.p,{children:"Context events are notifications emitted by a Context when bindings are added or removed. These events allow you to react to changes in the Context, such as when a new service is registered or when a configuration is updated."}),"\n",(0,s.jsx)(n.p,{children:"The Context emits the following events:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bind"}),": Emitted when a new binding is added to the context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unbind"}),": Emitted when an existing binding is removed from the context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"}),": Emitted when an observer throws an error during the notification process"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"context-event-listeners",children:"Context Event Listeners"}),"\n",(0,s.jsx)(n.p,{children:"You can listen to context events using the standard event emitter pattern."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context('my-context');\n\n// Listen for 'bind' events\ncontext.on('bind', event => {\n  console.log(`Binding added: ${event.binding.key}`);\n});\n\n// Listen for 'unbind' events\ncontext.on('unbind', event => {\n  console.log(`Binding removed: ${event.binding.key}`);\n});\n\n// Add a binding\ncontext.bind('greeting').to('Hello, world!');\n// Output: Binding added: greeting\n\n// Remove a binding\ncontext.unbind('greeting');\n// Output: Binding removed: greeting\n"})}),"\n",(0,s.jsx)(n.h2,{id:"what-are-context-observers",children:"What are Context Observers?"}),"\n",(0,s.jsx)(n.p,{children:"Context observers provide a more structured way to react to context events. Unlike event listeners, observers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Can filter which bindings they are interested in"}),"\n",(0,s.jsx)(n.li,{children:"Can perform asynchronous operations"}),"\n",(0,s.jsx)(n.li,{children:"Are notified in a controlled manner"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["A context observer is an object that implements the ",(0,s.jsx)(n.code,{children:"ContextObserver"})," interface:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface ContextObserver {\n  // An optional filter function to match bindings\n  filter?: BindingFilter;\n\n  // Listen on 'bind', 'unbind', or other events\n  observe(eventType: string, binding: Readonly<Binding<unknown>>, context: Context): ValueOrPromise<void>;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-and-using-context-observers",children:"Creating and Using Context Observers"}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of creating and using a context observer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Context, ContextObserver } from 'contexify';\n\nconst context = new Context('my-context');\n\n// Create an observer\nconst serviceObserver: ContextObserver = {\n  // Only interested in bindings with 'service' tag\n  filter: binding => binding.tagMap.service != null,\n\n  observe(event, binding, ctx) {\n    if (event === 'bind') {\n      console.log(`Service registered: ${binding.key}`);\n      // You can perform async operations here\n      return registerServiceWithRegistry(binding.key);\n    } else if (event === 'unbind') {\n      console.log(`Service unregistered: ${binding.key}`);\n      return unregisterServiceFromRegistry(binding.key);\n    }\n  }\n};\n\n// Register the observer\ncontext.subscribe(serviceObserver);\n\n// Add a binding with 'service' tag\ncontext.bind('services.UserService')\n  .toClass(UserService)\n  .tag('service');\n// Output: Service registered: services.UserService\n"})}),"\n",(0,s.jsx)(n.h2,{id:"observer-function",children:"Observer Function"}),"\n",(0,s.jsx)(n.p,{children:"If you don't need the filtering capability, you can use a simple function as an observer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context('my-context');\n\n// Create an observer function\nconst observerFn = (event, binding, ctx) => {\n  console.log(`Event: ${event}, Binding: ${binding.key}`);\n};\n\n// Register the observer function\ncontext.subscribe(observerFn);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"context-views",children:"Context Views"}),"\n",(0,s.jsx)(n.p,{children:"Context views are a higher-level abstraction built on top of observers. They allow you to track a set of bindings that match a specific filter and get their resolved values."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context('my-context');\n\n// Create a view that tracks all bindings with 'controller' tag\nconst controllersView = context.createView(\n  binding => binding.tagMap.controller != null\n);\n\n// Get all controller instances\nasync function getControllers() {\n  const controllers = await controllersView.values();\n  return controllers;\n}\n\n// Add a controller\ncontext.bind('controllers.UserController')\n  .toClass(UserController)\n  .tag('controller');\n\n// Now getControllers() will include UserController\n"})}),"\n",(0,s.jsx)(n.h3,{id:"context-view-events",children:"Context View Events"}),"\n",(0,s.jsx)(n.p,{children:"A Context View emits events when bindings are added or removed from the view:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\nconst context = new Context('my-context');\nconst controllersView = context.createView(\n  binding => binding.tagMap.controller != null\n);\n\n// Listen for 'refresh' events\ncontrollersView.on('refresh', () => {\n  console.log('Controllers view refreshed');\n});\n\n// Listen for 'resolve' events\ncontrollersView.on('resolve', () => {\n  console.log('Controllers view resolved');\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"observer-error-handling",children:"Observer Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Errors thrown by context observers are reported through the context chain:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If any context in the chain has ",(0,s.jsx)(n.code,{children:"error"})," listeners, an ",(0,s.jsx)(n.code,{children:"error"})," event is emitted on that context"]}),"\n",(0,s.jsxs)(n.li,{children:["If no context has ",(0,s.jsx)(n.code,{children:"error"})," listeners, an ",(0,s.jsx)(n.code,{children:"error"})," event is emitted on the current context, which may cause the process to exit"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It's recommended to handle errors in your observers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const observer: ContextObserver = {\n  filter: binding => binding.tagMap.service != null,\n\n  observe(event, binding, ctx) {\n    try {\n      // Your observer logic\n    } catch (error) {\n      console.error('Error in observer:', error);\n      // Handle the error\n    }\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use observers for dynamic discovery of components"}),"\n",(0,s.jsx)(n.li,{children:"Keep observers focused on a single concern"}),"\n",(0,s.jsx)(n.li,{children:"Handle errors properly in observers"}),"\n",(0,s.jsx)(n.li,{children:"Use context views for tracking related bindings"}),"\n",(0,s.jsx)(n.li,{children:"Be mindful of the performance impact of observers, especially for frequently changing bindings"}),"\n",(0,s.jsx)(n.li,{children:"Close context views when they are no longer needed to avoid memory leaks"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you understand Observers and Events, you can learn about:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./context",children:"Context"})," - The container for bindings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./binding",children:"Binding"})," - How to register dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./dependency-injection",children:"Dependency Injection"})," - How to inject dependencies into your classes"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);