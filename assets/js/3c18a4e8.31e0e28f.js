"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[62],{991:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(4700);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},4670:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/context-view","title":"ContextView","description":"The ContextView class allows you to track a set of bindings that match a specific filter. It provides methods for resolving and observing these bindings.","source":"@site/docs/api/context-view.md","sourceDirName":"api","slug":"/api/context-view","permalink":"/contexify/docs/api/context-view","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/context-view.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Binding","permalink":"/contexify/docs/api/binding"},"next":{"title":"Decorators","permalink":"/contexify/docs/api/decorators"}}');var t=s(7968),r=s(991);const c={sidebar_position:3},l="ContextView",o={},d=[{value:"Constructor",id:"constructor",level:2},{value:"constructor",id:"constructor-1",level:3},{value:"Methods",id:"methods",level:2},{value:"resolve",id:"resolve",level:3},{value:"values",id:"values",level:3},{value:"bindings",id:"bindings",level:3},{value:"Event Methods",id:"event-methods",level:2},{value:"on",id:"on",level:3},{value:"once",id:"once",level:3},{value:"off",id:"off",level:3},{value:"Lifecycle Methods",id:"lifecycle-methods",level:2},{value:"close",id:"close",level:3},{value:"Events",id:"events",level:2},{value:"Complete Example",id:"complete-example",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"contextview",children:"ContextView"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ContextView"})," class allows you to track a set of bindings that match a specific filter. It provides methods for resolving and observing these bindings."]}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,t.jsx)(n.p,{children:"Creates a new ContextView instance."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"context"}),": The Context to view."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filter"}),": A function that filters bindings."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"comparator"})," (optional): A function that compares bindings for sorting."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," A new ContextView instance."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Create a view that tracks all bindings with the 'service' tag\nconst serviceView = new ContextView<any>(\n  context,\n  binding => binding.tags.has('service'),\n  (a, b) => a.key.localeCompare(b.key)\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"resolve",children:"resolve"}),"\n",(0,t.jsx)(n.p,{children:"Resolves all bindings that match the filter."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," A Promise that resolves to an array of resolved values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Resolve all services\nconst services = await serviceView.resolve();\nconsole.log(`Resolved ${services.length} services`);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"values",children:"values"}),"\n",(0,t.jsxs)(n.p,{children:["Alias for ",(0,t.jsx)(n.code,{children:"resolve()"}),". Resolves all bindings that match the filter."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," A Promise that resolves to an array of resolved values."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Resolve all services\nconst services = await serviceView.values();\nconsole.log(`Resolved ${services.length} services`);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bindings",children:"bindings"}),"\n",(0,t.jsx)(n.p,{children:"Gets all bindings that match the filter."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," An array of bindings."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get all service bindings\nconst bindings = serviceView.bindings();\nconsole.log(`Found ${bindings.length} service bindings`);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"event-methods",children:"Event Methods"}),"\n",(0,t.jsx)(n.h3,{id:"on",children:"on"}),"\n",(0,t.jsx)(n.p,{children:"Adds an event listener for the given event."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": The event name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"}),": The event listener function."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," The ContextView instance (for method chaining)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Listen for binding changes\nserviceView.on('bind', (binding) => {\n  console.log(`New service binding: ${binding.key}`);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"once",children:"once"}),"\n",(0,t.jsx)(n.p,{children:"Adds a one-time event listener for the given event."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": The event name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"}),": The event listener function."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," The ContextView instance (for method chaining)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Listen for the next binding change only\nserviceView.once('bind', (binding) => {\n  console.log(`New service binding: ${binding.key}`);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"off",children:"off"}),"\n",(0,t.jsx)(n.p,{children:"Removes an event listener for the given event."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": The event name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"}),": The event listener function to remove."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," The ContextView instance (for method chaining)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Create a listener\nconst listener = (binding) => {\n  console.log(`New service binding: ${binding.key}`);\n};\n\n// Add the listener\nserviceView.on('bind', listener);\n\n// Later, remove the listener\nserviceView.off('bind', listener);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"lifecycle-methods",children:"Lifecycle Methods"}),"\n",(0,t.jsx)(n.h3,{id:"close",children:"close"}),"\n",(0,t.jsx)(n.p,{children:"Closes the ContextView, removing all event listeners."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Close the view when done\nserviceView.close();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.p,{children:"The ContextView class emits the following events:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bind"}),": Emitted when a binding that matches the filter is added to the context."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"unbind"}),": Emitted when a binding that matches the filter is removed from the context."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example showing how to use the ContextView class:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Context, ContextView, injectable } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Define some services\n@injectable()\nclass LoggerService {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n@injectable()\nclass UserService {\n  getUsers() {\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n@injectable()\nclass OrderService {\n  getOrders() {\n    return ['order1', 'order2'];\n  }\n}\n\n// Bind the services to the context\ncontext.bind('services.LoggerService').toClass(LoggerService).tag('service');\ncontext.bind('services.UserService').toClass(UserService).tag('service');\ncontext.bind('services.OrderService').toClass(OrderService).tag('service');\n\n// Create a view of all services\nconst serviceView = new ContextView<any>(\n  context,\n  binding => binding.tags.has('service'),\n  (a, b) => a.key.localeCompare(b.key)\n);\n\n// Listen for new services\nserviceView.on('bind', (binding) => {\n  console.log(`New service detected: ${binding.key}`);\n});\n\n// Use the view\nasync function run() {\n  // Get all service bindings\n  const bindings = serviceView.bindings();\n  console.log(`Found ${bindings.length} service bindings:`);\n  bindings.forEach(binding => console.log(`- ${binding.key}`));\n\n  // Resolve all services\n  const services = await serviceView.resolve();\n  console.log(`Resolved ${services.length} services`);\n\n  // Add a new service\n  context.bind('services.PaymentService').toClass(PaymentService).tag('service');\n\n  // Close the view when done\n  serviceView.close();\n}\n\nrun().catch(err => console.error(err));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);