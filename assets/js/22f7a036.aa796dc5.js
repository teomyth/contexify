"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[774],{5471:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"best-practices/advanced-patterns","title":"Advanced Patterns","description":"This document provides advanced patterns and best practices for using Contexify.","source":"@site/docs/best-practices/advanced-patterns.md","sourceDirName":"best-practices","slug":"/best-practices/advanced-patterns","permalink":"/contexify/docs/best-practices/advanced-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/best-practices/advanced-patterns.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection Best Practices","permalink":"/contexify/docs/best-practices/dependency-injection"}}');var t=i(7968),s=i(9880);const c={sidebar_position:4},o="Advanced Patterns",a={},d=[{value:"Using Interceptors",id:"using-interceptors",level:2},{value:"Using the Observer Pattern",id:"using-the-observer-pattern",level:2},{value:"Configuration Management",id:"configuration-management",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"advanced-patterns",children:"Advanced Patterns"})}),"\n",(0,t.jsx)(n.p,{children:"This document provides advanced patterns and best practices for using Contexify."}),"\n",(0,t.jsx)(n.h2,{id:"using-interceptors",children:"Using Interceptors"}),"\n",(0,t.jsx)(n.p,{children:"Interceptors allow you to execute code before and after method calls:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { LogInterceptor } from './interceptors';\n\n@injectable()\nexport class UserService {\n  @intercept(LogInterceptor)\n  async createUser(userData: UserData) {\n    // Logic to create a user\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Interceptor use cases:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Logging"}),"\n",(0,t.jsx)(n.li,{children:"Performance monitoring"}),"\n",(0,t.jsx)(n.li,{children:"Error handling"}),"\n",(0,t.jsx)(n.li,{children:"Transaction management"}),"\n",(0,t.jsx)(n.li,{children:"Caching"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"using-the-observer-pattern",children:"Using the Observer Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Observe binding changes in the Context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ContextObserver } from 'contexify';\n\nexport class ServiceRegistry implements ContextObserver {\n  // Only interested in bindings with 'service' tag\n  filter = (binding) => binding.tagMap.service != null;\n\n  observe(event: string, binding: Binding) {\n    if (event === 'bind') {\n      console.log(`Service registered: ${binding.key}`);\n      // Handle new service\n    } else if (event === 'unbind') {\n      console.log(`Service unregistered: ${binding.key}`);\n      // Clean up service\n    }\n  }\n}\n\n// Register the observer\napp.subscribe(new ServiceRegistry());\n"})}),"\n",(0,t.jsx)(n.p,{children:"Observer use cases:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dynamic service discovery and registration"}),"\n",(0,t.jsx)(n.li,{children:"Monitoring binding changes"}),"\n",(0,t.jsx)(n.li,{children:"Implementing plugin systems"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,t.jsx)(n.p,{children:"Use Context's configuration capabilities to manage application configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Register configuration\napp.configure('services.EmailService').to({\n  host: 'smtp.example.com',\n  port: 587,\n  secure: true,\n});\n\n// Use configuration in services\n@injectable()\nexport class EmailService {\n  constructor(@config() private config: EmailConfig) {}\n\n  async sendEmail(options: EmailOptions) {\n    // Access configuration via this.config\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Configuration best practices:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"configure()"})," and ",(0,t.jsx)(n.code,{children:"@config()"})," instead of hardcoding configuration keys"]}),"\n",(0,t.jsx)(n.li,{children:"Provide default values for configuration"}),"\n",(0,t.jsx)(n.li,{children:"Support environment-specific configuration overrides"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"Advanced patterns for using Context as your application core:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Interceptors"}),": Add cross-cutting concerns like logging and error handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement Observers"}),": Monitor binding changes and react to them"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manage Configuration"}),": Use Context's configuration capabilities for flexible configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Tags"}),": Tag bindings for easier discovery and management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create Custom Providers"}),": Implement custom providers for complex dependency resolution"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},9880:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var r=i(4700);const t={},s=r.createContext(t);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);