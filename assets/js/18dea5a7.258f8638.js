"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[331],{7828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"guides/application-structure","title":"Application Structure Guide","description":"This guide provides recommendations for structuring your application using Contexify.","source":"@site/docs/guides/application-structure.md","sourceDirName":"guides","slug":"/guides/application-structure","permalink":"/contexify/docs/guides/application-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/guides/application-structure.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/contexify/docs/category/guides"},"next":{"title":"Component Creation Guide","permalink":"/contexify/docs/guides/component-creation"}}');var i=t(7968),r=t(9880);const s={sidebar_position:1},c="Application Structure Guide",a={},p=[{value:"Overview",id:"overview",level:2},{value:"Recommended Application Structure",id:"recommended-application-structure",level:2},{value:"Application Class",id:"application-class",level:2},{value:"Components",id:"components",level:2},{value:"Controllers",id:"controllers",level:2},{value:"Services",id:"services",level:2},{value:"Repositories",id:"repositories",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Entry Point",id:"entry-point",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"application-structure-guide",children:"Application Structure Guide"})}),"\n",(0,i.jsx)(n.p,{children:"This guide provides recommendations for structuring your application using Contexify."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"A well-structured application is easier to maintain, test, and extend. Contexify provides the tools to create a modular and flexible application structure."}),"\n",(0,i.jsx)(n.h2,{id:"recommended-application-structure",children:"Recommended Application Structure"}),"\n",(0,i.jsx)(n.p,{children:"Here's a recommended structure for a typical application using Contexify:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 application.ts              # Main application class\n\u251c\u2500\u2500 index.ts                    # Entry point\n\u251c\u2500\u2500 components/                 # Reusable components\n\u2502   \u251c\u2500\u2500 authentication/         # Authentication component\n\u2502   \u2502   \u251c\u2500\u2500 index.ts            # Component exports\n\u2502   \u2502   \u251c\u2500\u2500 keys.ts             # Binding keys\n\u2502   \u2502   \u251c\u2500\u2500 types.ts            # Type definitions\n\u2502   \u2502   \u251c\u2500\u2500 services/           # Services\n\u2502   \u2502   \u2514\u2500\u2500 providers/          # Providers\n\u2502   \u2514\u2500\u2500 ...                     # Other components\n\u251c\u2500\u2500 controllers/                # Controllers\n\u2502   \u251c\u2500\u2500 index.ts                # Controller exports\n\u2502   \u251c\u2500\u2500 user-controller.ts      # User controller\n\u2502   \u2514\u2500\u2500 ...                     # Other controllers\n\u251c\u2500\u2500 models/                     # Domain models\n\u2502   \u251c\u2500\u2500 index.ts                # Model exports\n\u2502   \u251c\u2500\u2500 user.model.ts           # User model\n\u2502   \u2514\u2500\u2500 ...                     # Other models\n\u251c\u2500\u2500 repositories/               # Data access repositories\n\u2502   \u251c\u2500\u2500 index.ts                # Repository exports\n\u2502   \u251c\u2500\u2500 user.repository.ts      # User repository\n\u2502   \u2514\u2500\u2500 ...                     # Other repositories\n\u251c\u2500\u2500 services/                   # Business logic services\n\u2502   \u251c\u2500\u2500 index.ts                # Service exports\n\u2502   \u251c\u2500\u2500 user.service.ts         # User service\n\u2502   \u2514\u2500\u2500 ...                     # Other services\n\u2514\u2500\u2500 config/                     # Configuration\n    \u251c\u2500\u2500 index.ts                # Configuration exports\n    \u251c\u2500\u2500 keys.ts                 # Binding keys\n    \u2514\u2500\u2500 types.ts                # Type definitions\n"})}),"\n",(0,i.jsx)(n.h2,{id:"application-class",children:"Application Class"}),"\n",(0,i.jsxs)(n.p,{children:["The application class is the core of your application. It extends the ",(0,i.jsx)(n.code,{children:"Context"})," class and serves as the root context for your application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Context, createBindingFromClass } from 'contexify';\nimport { UserController } from './controllers';\nimport { UserService } from './services';\nimport { UserRepository } from './repositories';\nimport { AuthComponent } from './components/authentication';\n\nexport class MyApplication extends Context {\n  constructor() {\n    super('application');\n\n    // Configure the application\n    this.configure();\n  }\n\n  private configure() {\n    // Register components (planned for future implementation)\n    // this.component(AuthComponent, { /* config */ });\n\n    // For now, manually add component bindings\n    const authComponent = new AuthComponent();\n    for (const binding of authComponent.bindings) {\n      this.add(binding);\n    }\n\n    // Register services\n    this.bind('services.UserService').toClass(UserService);\n\n    // Register repositories\n    this.bind('repositories.UserRepository').toClass(UserRepository);\n\n    // Register controllers\n    this.bind('controllers.UserController').toClass(UserController);\n  }\n\n  // Add a component to the application (planned for future implementation)\n  component(componentClass: Function, config?: any) {\n    // Note: This is a simplified placeholder for the planned component support\n    // The actual implementation will be available in the second phase\n    console.log('Component support is planned for future implementation');\n    return this;\n  }\n\n  // Start the application\n  async start() {\n    console.log('Application starting...');\n    // Application startup logic\n  }\n\n  // Stop the application\n  async stop() {\n    console.log('Application stopping...');\n    // Application cleanup logic\n    this.close();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," Component support is planned for the second phase of development and is not yet available in the current version of Contexify."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Components are collections of related bindings that can be reused across applications. They are a great way to organize your code and promote modularity."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { createBindingFromClass, injectable } from 'contexify';\nimport { AuthService } from './services';\nimport { TokenProvider } from './providers';\n\n@injectable({ tags: ['component'] })\nexport class AuthComponent {\n  bindings = [\n    createBindingFromClass(AuthService),\n    createBindingFromClass(TokenProvider),\n  ];\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more details on creating components, see the ",(0,i.jsx)(n.a,{href:"./component-creation",children:"Component Creation Guide"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"controllers",children:"Controllers"}),"\n",(0,i.jsx)(n.p,{children:"Controllers handle incoming requests and return responses. They typically depend on services to perform business logic."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\nimport { UserService } from '../services';\nimport { User } from '../models';\n\n@injectable()\nexport class UserController {\n  constructor(\n    @inject('services.UserService') private userService: UserService\n  ) {}\n\n  async getUser(id: string): Promise<User> {\n    return this.userService.getUser(id);\n  }\n\n  async createUser(userData: Partial<User>): Promise<User> {\n    return this.userService.createUser(userData);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,i.jsx)(n.p,{children:"Services contain the business logic of your application. They typically depend on repositories to access data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\nimport { UserRepository } from '../repositories';\nimport { User } from '../models';\n\n@injectable()\nexport class UserService {\n  constructor(\n    @inject('repositories.UserRepository') private userRepo: UserRepository\n  ) {}\n\n  async getUser(id: string): Promise<User> {\n    return this.userRepo.findById(id);\n  }\n\n  async createUser(userData: Partial<User>): Promise<User> {\n    // Business logic\n    return this.userRepo.create(userData);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"repositories",children:"Repositories"}),"\n",(0,i.jsx)(n.p,{children:"Repositories handle data access. They typically depend on a data source to connect to a database."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\nimport { DataSource } from '../config';\nimport { User } from '../models';\n\n@injectable()\nexport class UserRepository {\n  constructor(\n    @inject('datasources.default') private dataSource: DataSource\n  ) {}\n\n  async findById(id: string): Promise<User> {\n    // Data access logic\n    return this.dataSource.findById('users', id);\n  }\n\n  async create(userData: Partial<User>): Promise<User> {\n    // Data access logic\n    return this.dataSource.create('users', userData);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Configuration is stored in the context and can be accessed by services and other components."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Configuration keys\nexport namespace ConfigKeys {\n  export const DATABASE = 'config.database';\n  export const SERVER = 'config.server';\n}\n\n// Configuration types\nexport interface DatabaseConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\nexport interface ServerConfig {\n  port: number;\n  host: string;\n}\n\n// Configure the application\nexport function configureApplication(app: Context) {\n  // Database configuration\n  app.bind(ConfigKeys.DATABASE).to({\n    host: process.env.DB_HOST || 'localhost',\n    port: parseInt(process.env.DB_PORT || '5432'),\n    username: process.env.DB_USER || 'postgres',\n    password: process.env.DB_PASSWORD || 'postgres',\n    database: process.env.DB_NAME || 'myapp',\n  });\n\n  // Server configuration\n  app.bind(ConfigKeys.SERVER).to({\n    port: parseInt(process.env.PORT || '3000'),\n    host: process.env.HOST || 'localhost',\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"entry-point",children:"Entry Point"}),"\n",(0,i.jsx)(n.p,{children:"The entry point of your application creates and starts the application."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { MyApplication } from './application';\nimport { configureApplication } from './config';\n\nasync function main() {\n  // Create the application\n  const app = new MyApplication();\n\n  // Configure the application\n  configureApplication(app);\n\n  // Start the application\n  await app.start();\n\n  console.log('Application is running');\n\n  // Handle shutdown\n  process.on('SIGINT', async () => {\n    console.log('Shutting down...');\n    await app.stop();\n    process.exit(0);\n  });\n}\n\nmain().catch(err => {\n  console.error('Failed to start application:', err);\n  process.exit(1);\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Separation of Concerns"}),": Keep different parts of your application separate (controllers, services, repositories)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency Injection"}),": Use dependency injection to make your code more testable and maintainable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Component-Based Architecture"}),": Organize related functionality into components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration Management"}),": Use the context to manage configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binding Naming Conventions"}),": Use consistent naming conventions for binding keys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Implement proper error handling throughout your application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lifecycle Management"}),": Properly manage the lifecycle of your application and its components"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand how to structure your application, you can learn about:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./component-creation",children:"Component Creation"})," - How to create reusable components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./testing",children:"Testing"})," - How to test your application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../category/core-concepts",children:"Core Concepts"})," - Learn about the core concepts of Contexify"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},9880:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(4700);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);