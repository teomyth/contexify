"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[469],{3552:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"best-practices/dependency-injection","title":"Dependency Injection Best Practices","description":"This document provides best practices for using dependency injection with Contexify.","source":"@site/docs/best-practices/dependency-injection.md","sourceDirName":"best-practices","slug":"/best-practices/dependency-injection","permalink":"/contexify/docs/best-practices/dependency-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/best-practices/dependency-injection.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Application Architecture","permalink":"/contexify/docs/best-practices/application-architecture"},"next":{"title":"Advanced Patterns","permalink":"/contexify/docs/best-practices/advanced-patterns"}}');var t=i(7968),c=i(9880);const o={sidebar_position:3},r="Dependency Injection Best Practices",a={},d=[{value:"Use Decorators for Dependency Injection",id:"use-decorators-for-dependency-injection",level:2},{value:"Binding Key Naming Conventions",id:"binding-key-naming-conventions",level:2},{value:"Scope Management",id:"scope-management",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dependency-injection-best-practices",children:"Dependency Injection Best Practices"})}),"\n",(0,t.jsx)(n.p,{children:"This document provides best practices for using dependency injection with Contexify."}),"\n",(0,t.jsx)(n.h2,{id:"use-decorators-for-dependency-injection",children:"Use Decorators for Dependency Injection"}),"\n",(0,t.jsx)(n.p,{children:"It's recommended to use decorators for dependency injection instead of directly retrieving dependencies from the Context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { inject, injectable } from 'contexify';\n\n@injectable()\nexport class UserController {\n  constructor(\n    @inject('repositories.UserRepository') private userRepo: UserRepository,\n    @inject('services.EmailService') private emailService: EmailService\n  ) {}\n\n  async createUser(userData: UserData) {\n    const user = await this.userRepo.create(userData);\n    await this.emailService.sendWelcomeEmail(user);\n    return user;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Benefits:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dependencies are explicit and visible"}),"\n",(0,t.jsx)(n.li,{children:"Easy to test, as dependencies can be mocked"}),"\n",(0,t.jsx)(n.li,{children:"Code is cleaner and more maintainable"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"binding-key-naming-conventions",children:"Binding Key Naming Conventions"}),"\n",(0,t.jsx)(n.p,{children:"Use consistent naming conventions to organize binding keys:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Services\napp.bind('services.EmailService').toClass(EmailService);\n\n// Repositories\napp.bind('repositories.UserRepository').toClass(UserRepository);\n\n// Controllers\napp.bind('controllers.UserController').toClass(UserController);\n\n// Configuration\napp.bind('config.api').to({\n  port: 3000,\n  host: 'localhost',\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Recommended naming patterns:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{namespace}.{name}"}),": Use namespace and name"]}),"\n",(0,t.jsx)(n.li,{children:"Use plural forms for namespaces (services, repositories, controllers)"}),"\n",(0,t.jsxs)(n.li,{children:["For configurations, use ",(0,t.jsx)(n.code,{children:"config.{component}"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"scope-management",children:"Scope Management"}),"\n",(0,t.jsx)(n.p,{children:"Choose appropriate scopes based on the nature of the component:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { BindingScope } from 'contexify';\n\n// Singleton service\napp\n  .bind('services.ConfigService')\n  .toClass(ConfigService)\n  .inScope(BindingScope.SINGLETON);\n\n// One instance per request\napp\n  .bind('controllers.RequestController')\n  .toClass(RequestController)\n  .inScope(BindingScope.TRANSIENT);\n\n// Singleton in the current context\napp\n  .bind('services.CacheService')\n  .toClass(CacheService)\n  .inScope(BindingScope.CONTEXT);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Scope guidelines:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SINGLETON"}),": For services with shared state (configurations, database connections)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TRANSIENT"}),": For components that need a new instance each time they're used"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CONTEXT"}),": For components shared within a specific context"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},9880:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(4700);const t={},c=s.createContext(t);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);