"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[113],{991:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(4700);const o={},c=r.createContext(o);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:n},e.children)}},8045:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"core-concepts/interceptors","title":"Interceptors","description":"What are Interceptors?","source":"@site/docs/core-concepts/interceptors.md","sourceDirName":"core-concepts","slug":"/core-concepts/interceptors","permalink":"/contexify/docs/core-concepts/interceptors","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/core-concepts/interceptors.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection","permalink":"/contexify/docs/core-concepts/dependency-injection"},"next":{"title":"Observers and Events","permalink":"/contexify/docs/core-concepts/observers"}}');var o=t(7968),c=t(991);const i={sidebar_position:4},s="Interceptors",a={},l=[{value:"What are Interceptors?",id:"what-are-interceptors",level:2},{value:"How Interceptors Work",id:"how-interceptors-work",level:2},{value:"Creating an Interceptor",id:"creating-an-interceptor",level:2},{value:"Using Interceptors",id:"using-interceptors",level:2},{value:"Method-level Interceptors",id:"method-level-interceptors",level:3},{value:"Class-level Interceptors",id:"class-level-interceptors",level:3},{value:"Multiple Interceptors",id:"multiple-interceptors",level:3},{value:"Interceptor Context",id:"interceptor-context",level:2},{value:"Common Interceptor Patterns",id:"common-interceptor-patterns",level:2},{value:"Logging Interceptor",id:"logging-interceptor",level:3},{value:"Caching Interceptor",id:"caching-interceptor",level:3},{value:"Error Handling Interceptor",id:"error-handling-interceptor",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"interceptors",children:"Interceptors"})}),"\n",(0,o.jsx)(n.h2,{id:"what-are-interceptors",children:"What are Interceptors?"}),"\n",(0,o.jsx)(n.p,{children:"Interceptors are a powerful feature in Contexify that allow you to add cross-cutting concerns to your methods. They intercept method calls and can execute code before and after the method execution, or even modify the method's behavior."}),"\n",(0,o.jsx)(n.p,{children:"Common use cases for interceptors include:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Logging"}),"\n",(0,o.jsx)(n.li,{children:"Performance monitoring"}),"\n",(0,o.jsx)(n.li,{children:"Error handling"}),"\n",(0,o.jsx)(n.li,{children:"Transaction management"}),"\n",(0,o.jsx)(n.li,{children:"Caching"}),"\n",(0,o.jsx)(n.li,{children:"Authorization"}),"\n",(0,o.jsx)(n.li,{children:"Validation"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-interceptors-work",children:"How Interceptors Work"}),"\n",(0,o.jsx)(n.p,{children:"Interceptors work by wrapping the original method in a chain of interceptor functions. When a method is called, the request flows through the interceptor chain before reaching the method, and then the response flows back through the chain."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502         \u2502     \u2502         \u2502     \u2502         \u2502     \u2502         \u2502   \u2502\n\u2502  \u2502 Request \u2502 \u2500\u2500\u25ba \u2502 Logger  \u2502 \u2500\u2500\u25ba \u2502 Cache   \u2502 \u2500\u2500\u25ba \u2502 Method  \u2502   \u2502\n\u2502  \u2502         \u2502     \u2502         \u2502     \u2502         \u2502     \u2502         \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                      \u2502               \u2502               \u2502         \u2502\n\u2502                      \u2502               \u2502               \u2502         \u2502\n\u2502                      \u25bc               \u25bc               \u25bc         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502         \u2502     \u2502         \u2502     \u2502         \u2502     \u2502         \u2502   \u2502\n\u2502  \u2502 Response\u2502 \u25c4\u2500\u2500 \u2502 Logger  \u2502 \u25c4\u2500\u2500 \u2502 Cache   \u2502 \u25c4\u2500\u2500 \u2502 Method  \u2502   \u2502\n\u2502  \u2502         \u2502     \u2502         \u2502     \u2502         \u2502     \u2502         \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-an-interceptor",children:"Creating an Interceptor"}),"\n",(0,o.jsxs)(n.p,{children:["An interceptor is a class that implements the ",(0,o.jsx)(n.code,{children:"Interceptor"})," interface."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Interceptor, InvocationContext, ValueOrPromise } from 'contexify';\n\nclass LogInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    // Code executed before the method call\n    console.log(`Calling method: ${invocationCtx.methodName}`);\n    \n    try {\n      // Call the next interceptor or the method itself\n      const result = await next();\n      \n      // Code executed after the method call\n      console.log(`Method ${invocationCtx.methodName} returned:`, result);\n      \n      // Return the result\n      return result;\n    } catch (error) {\n      // Code executed if the method throws an error\n      console.error(`Method ${invocationCtx.methodName} failed:`, error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-interceptors",children:"Using Interceptors"}),"\n",(0,o.jsx)(n.h3,{id:"method-level-interceptors",children:"Method-level Interceptors"}),"\n",(0,o.jsxs)(n.p,{children:["You can apply interceptors to specific methods using the ",(0,o.jsx)(n.code,{children:"@intercept"})," decorator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { LogInterceptor } from './interceptors';\n\n@injectable()\nclass UserService {\n  @intercept(LogInterceptor)\n  async createUser(userData: UserData) {\n    // Method implementation\n    return { id: '123', ...userData };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"class-level-interceptors",children:"Class-level Interceptors"}),"\n",(0,o.jsx)(n.p,{children:"You can apply interceptors to all methods of a class."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { LogInterceptor } from './interceptors';\n\n@injectable()\n@intercept(LogInterceptor)\nclass UserService {\n  async createUser(userData: UserData) {\n    // Method implementation\n    return { id: '123', ...userData };\n  }\n  \n  async getUser(id: string) {\n    // Method implementation\n    return { id, name: 'John Doe' };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"multiple-interceptors",children:"Multiple Interceptors"}),"\n",(0,o.jsx)(n.p,{children:"You can apply multiple interceptors to a method or class. They will be executed in the order they are specified."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { injectable, intercept } from 'contexify';\nimport { LogInterceptor, CacheInterceptor, AuthInterceptor } from './interceptors';\n\n@injectable()\nclass UserService {\n  @intercept(AuthInterceptor, LogInterceptor, CacheInterceptor)\n  async getUser(id: string) {\n    // Method implementation\n    return { id, name: 'John Doe' };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"interceptor-context",children:"Interceptor Context"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"InvocationContext"})," provides information about the method being intercepted."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface InvocationContext {\n  // The target object (instance of the class)\n  target: object;\n  \n  // The method name\n  methodName: string;\n  \n  // The method arguments\n  args: any[];\n  \n  // Additional metadata\n  metadata?: { [key: string]: any };\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can use this information in your interceptor to make decisions based on the method being called, its arguments, or the target object."}),"\n",(0,o.jsx)(n.h2,{id:"common-interceptor-patterns",children:"Common Interceptor Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"logging-interceptor",children:"Logging Interceptor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"class LogInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    const { methodName, args } = invocationCtx;\n    console.log(`Calling ${methodName} with args:`, args);\n    \n    const start = Date.now();\n    try {\n      const result = await next();\n      const duration = Date.now() - start;\n      console.log(`${methodName} completed in ${duration}ms with result:`, result);\n      return result;\n    } catch (error) {\n      const duration = Date.now() - start;\n      console.error(`${methodName} failed after ${duration}ms with error:`, error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"caching-interceptor",children:"Caching Interceptor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"class CacheInterceptor implements Interceptor {\n  private cache = new Map<string, any>();\n  \n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    const { methodName, args } = invocationCtx;\n    const cacheKey = `${methodName}:${JSON.stringify(args)}`;\n    \n    // Check if result is in cache\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Call the method\n    const result = await next();\n    \n    // Cache the result\n    this.cache.set(cacheKey, result);\n    \n    return result;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"error-handling-interceptor",children:"Error Handling Interceptor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"class ErrorHandlingInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    try {\n      return await next();\n    } catch (error) {\n      // Handle the error\n      console.error('Error in method execution:', error);\n      \n      // You can transform the error\n      throw new ApplicationError('An error occurred', { cause: error });\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Keep interceptors focused on a single concern"}),"\n",(0,o.jsx)(n.li,{children:"Use composition to combine multiple interceptors"}),"\n",(0,o.jsx)(n.li,{children:"Be mindful of the order of interceptors"}),"\n",(0,o.jsx)(n.li,{children:"Handle errors properly in interceptors"}),"\n",(0,o.jsx)(n.li,{children:"Use dependency injection in interceptors if they need access to services"}),"\n",(0,o.jsx)(n.li,{children:"Consider the performance impact of interceptors, especially for frequently called methods"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Now that you understand Interceptors, you can learn about:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./observers",children:"Observers"})," - How to react to changes in the Context"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./dependency-injection",children:"Dependency Injection"})," - How to inject dependencies into your classes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./binding",children:"Binding"})," - How to register dependencies"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);