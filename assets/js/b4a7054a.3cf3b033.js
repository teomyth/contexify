"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[129],{991:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(4700);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}},3905:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"examples/basic-example","title":"Basic Example","description":"This example demonstrates the basic usage of Contexify, including creating a context, binding services, and using dependency injection.","source":"@site/docs/examples/basic-example.md","sourceDirName":"examples","slug":"/examples/basic-example","permalink":"/contexify/docs/examples/basic-example","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/examples/basic-example.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Examples","permalink":"/contexify/docs/category/examples"},"next":{"title":"Features Examples","permalink":"/contexify/docs/examples/features"}}');var i=s(7968),t=s(991);const c={sidebar_position:1},a="Basic Example",o={},l=[{value:"Complete Example",id:"complete-example",level:2},{value:"Step-by-Step Explanation",id:"step-by-step-explanation",level:2},{value:"1. Define Interfaces",id:"1-define-interfaces",level:3},{value:"2. Implement Services",id:"2-implement-services",level:3},{value:"3. Create a Context",id:"3-create-a-context",level:3},{value:"4. Bind Services",id:"4-bind-services",level:3},{value:"5. Use Services",id:"5-use-services",level:3},{value:"Key Points",id:"key-points",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basic-example",children:"Basic Example"})}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates the basic usage of Contexify, including creating a context, binding services, and using dependency injection."}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Context, injectable, inject } from 'contexify';\n\n// Define interfaces\ninterface Logger {\n  log(message: string): void;\n}\n\ninterface UserService {\n  createUser(name: string): Promise<User>;\n}\n\ninterface User {\n  id: string;\n  name: string;\n}\n\n// Implement services\n@injectable()\nclass ConsoleLogger implements Logger {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n@injectable()\nclass DefaultUserService implements UserService {\n  constructor(@inject('services.Logger') private logger: Logger) {}\n\n  async createUser(name: string): Promise<User> {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind services\ncontext.bind('services.Logger').toClass(ConsoleLogger);\ncontext.bind('services.UserService').toClass(DefaultUserService);\n\n// Use services\nasync function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const user = await userService.createUser('John Doe');\n  console.log('Created user:', user);\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-explanation",children:"Step-by-Step Explanation"}),"\n",(0,i.jsx)(n.h3,{id:"1-define-interfaces",children:"1. Define Interfaces"}),"\n",(0,i.jsx)(n.p,{children:"First, we define interfaces for our services:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Logger {\n  log(message: string): void;\n}\n\ninterface UserService {\n  createUser(name: string): Promise<User>;\n}\n\ninterface User {\n  id: string;\n  name: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Defining interfaces helps with loose coupling and better testability."}),"\n",(0,i.jsx)(n.h3,{id:"2-implement-services",children:"2. Implement Services"}),"\n",(0,i.jsx)(n.p,{children:"Next, we implement our services:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass ConsoleLogger implements Logger {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n@injectable()\nclass DefaultUserService implements UserService {\n  constructor(@inject('services.Logger') private logger: Logger) {}\n\n  async createUser(name: string): Promise<User> {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"@injectable()"})," decorator marks the class as injectable"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"@inject('services.Logger')"})," decorator injects the Logger service"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-create-a-context",children:"3. Create a Context"}),"\n",(0,i.jsx)(n.p,{children:"Then, we create a context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const context = new Context('application');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-bind-services",children:"4. Bind Services"}),"\n",(0,i.jsx)(n.p,{children:"We bind our services to the context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"context.bind('services.Logger').toClass(ConsoleLogger);\ncontext.bind('services.UserService').toClass(DefaultUserService);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-use-services",children:"5. Use Services"}),"\n",(0,i.jsx)(n.p,{children:"Finally, we get the service from the context and use it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const user = await userService.createUser('John Doe');\n  console.log('Created user:', user);\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency Injection"}),": ",(0,i.jsx)(n.code,{children:"UserService"})," depends on ",(0,i.jsx)(n.code,{children:"Logger"})," through constructor injection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inversion of Control"}),": The creation and lifecycle of services are managed by the Context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Loose Coupling"}),": Services interact through interfaces rather than concrete implementations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Check out more advanced examples:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./modular-app",children:"Modular Application"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./interceptors",children:"Interceptors"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./observers",children:"Observers and Events"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);