"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[725],{991:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(4700);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},5821:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>v,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"examples/observers","title":"Observers Example","description":"This example demonstrates how to use the observer functionality in Contexify.","source":"@site/docs/examples/observers.md","sourceDirName":"examples","slug":"/examples/observers","permalink":"/contexify/docs/examples/observers","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/examples/observers.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Interceptors Example","permalink":"/contexify/docs/examples/interceptors"},"next":{"title":"Guides","permalink":"/contexify/docs/category/guides"}}');var o=r(7968),s=r(991);const i={sidebar_position:3},c="Observers Example",l={},a=[{value:"Using Context Views",id:"using-context-views",level:2},{value:"Learn More",id:"learn-more",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"observers-example",children:"Observers Example"})}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates how to use the observer functionality in Contexify."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Context, ContextObserver } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Create an observer\nconst serviceObserver: ContextObserver = {\n  // Only interested in bindings with 'service' tag\n  filter: binding => binding.tagMap.service != null,\n\n  observe(event, binding, ctx) {\n    if (event === 'bind') {\n      console.log(`Service registered: ${binding.key}`);\n    } else if (event === 'unbind') {\n      console.log(`Service unregistered: ${binding.key}`);\n    }\n  }\n};\n\n// Register the observer\ncontext.subscribe(serviceObserver);\n\n// Add bindings\ncontext.bind('services.UserService')\n  .to({ name: 'UserService' })\n  .tag('service');\n\ncontext.bind('services.OrderService')\n  .to({ name: 'OrderService' })\n  .tag('service');\n\ncontext.bind('repositories.UserRepository')\n  .to({ name: 'UserRepository' })\n  .tag('repository');\n\n// Remove a binding\ncontext.unbind('services.OrderService');\n\n// Output:\n// Service registered: services.UserService\n// Service registered: services.OrderService\n// Service unregistered: services.OrderService\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-context-views",children:"Using Context Views"}),"\n",(0,o.jsx)(n.p,{children:"Context views are a higher-level abstraction built on top of observers. They allow you to track a set of bindings that match a specific filter and get their resolved values."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Create a view that tracks all bindings with 'controller' tag\nconst controllersView = context.createView(\n  binding => binding.tagMap.controller != null\n);\n\n// Listen for view events\ncontrollersView.on('refresh', () => {\n  console.log('Controllers view refreshed');\n});\n\n// Add controllers\ncontext.bind('controllers.UserController')\n  .to({ name: 'UserController' })\n  .tag('controller');\n\ncontext.bind('controllers.OrderController')\n  .to({ name: 'OrderController' })\n  .tag('controller');\n\n// Get all controllers\nasync function getControllers() {\n  const controllers = await controllersView.values();\n  console.log('Controllers:', controllers.map(c => c.name));\n}\n\n// Remove a controller\nfunction removeOrderController() {\n  context.unbind('controllers.OrderController');\n}\n\n// Run the example\nasync function run() {\n  await getControllers();\n  // Output: Controllers: ['UserController', 'OrderController']\n  \n  removeOrderController();\n  \n  await getControllers();\n  // Output: Controllers: ['UserController']\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,o.jsxs)(n.p,{children:["To learn more about observers and events, see the ",(0,o.jsx)(n.a,{href:"../core-concepts/observers",children:"Observers and Events"})," documentation."]})]})}function v(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);