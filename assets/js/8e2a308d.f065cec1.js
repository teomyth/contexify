"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[800],{7805:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"core-concepts/dependency-injection","title":"Dependency Injection","description":"What is Dependency Injection?","source":"@site/docs/core-concepts/dependency-injection.md","sourceDirName":"core-concepts","slug":"/core-concepts/dependency-injection","permalink":"/contexify/docs/core-concepts/dependency-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/core-concepts/dependency-injection.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Binding","permalink":"/contexify/docs/core-concepts/binding"},"next":{"title":"Interceptors","permalink":"/contexify/docs/core-concepts/interceptors"}}');var c=i(7968),s=i(9880);const r={sidebar_position:3},o="Dependency Injection",l={},a=[{value:"What is Dependency Injection?",id:"what-is-dependency-injection",level:2},{value:"Benefits of Dependency Injection",id:"benefits-of-dependency-injection",level:2},{value:"Basic Dependency Injection",id:"basic-dependency-injection",level:2},{value:"Injection Decorators",id:"injection-decorators",level:2},{value:"@injectable()",id:"injectable",level:3},{value:"@inject()",id:"inject",level:3},{value:"@inject.tag()",id:"injecttag",level:3},{value:"@inject.getter()",id:"injectgetter",level:3},{value:"@inject.view()",id:"injectview",level:3},{value:"@config()",id:"config",level:3},{value:"Property Injection",id:"property-injection",level:2},{value:"Method Injection",id:"method-injection",level:2},{value:"Optional Dependencies",id:"optional-dependencies",level:2},{value:"Circular Dependencies",id:"circular-dependencies",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"dependency-injection",children:"Dependency Injection"})}),"\n",(0,c.jsx)(n.h2,{id:"what-is-dependency-injection",children:"What is Dependency Injection?"}),"\n",(0,c.jsx)(n.p,{children:"Dependency Injection (DI) is a design pattern that allows you to inject dependencies into your classes rather than creating them inside the class. This makes your code more modular, testable, and maintainable."}),"\n",(0,c.jsx)(n.p,{children:"In Contexify, dependency injection is implemented through the Context system and decorators."}),"\n",(0,c.jsx)(n.h2,{id:"benefits-of-dependency-injection",children:"Benefits of Dependency Injection"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Decoupling"}),": Classes don't need to know how to create their dependencies"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Testability"}),": Dependencies can be easily mocked for testing"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Flexibility"}),": Dependencies can be changed without modifying the class"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Reusability"}),": Classes can be reused with different dependencies"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"basic-dependency-injection",children:"Basic Dependency Injection"}),"\n",(0,c.jsx)(n.p,{children:"The most common form of dependency injection is constructor injection, where dependencies are provided through the constructor."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\n\n@injectable()\nclass UserService {\n  constructor(\n    @inject('repositories.UserRepository') private userRepo: UserRepository,\n    @inject('services.EmailService') private emailService: EmailService\n  ) {}\n\n  async createUser(userData: UserData) {\n    const user = await this.userRepo.create(userData);\n    await this.emailService.sendWelcomeEmail(user);\n    return user;\n  }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"In this example:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"@injectable()"})," marks the class as injectable, allowing Contexify to create instances of it"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"@inject('repositories.UserRepository')"})," tells Contexify to inject the dependency with the key 'repositories.UserRepository'"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"injection-decorators",children:"Injection Decorators"}),"\n",(0,c.jsx)(n.p,{children:"Contexify provides several decorators for dependency injection:"}),"\n",(0,c.jsx)(n.h3,{id:"injectable",children:"@injectable()"}),"\n",(0,c.jsx)(n.p,{children:"Marks a class as injectable, allowing Contexify to create instances of it."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable } from 'contexify';\n\n@injectable()\nclass UserService {\n  // ...\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"inject",children:"@inject()"}),"\n",(0,c.jsx)(n.p,{children:"Injects a dependency by its binding key."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\n\n@injectable()\nclass UserController {\n  constructor(\n    @inject('services.UserService') private userService: UserService\n  ) {}\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"injecttag",children:"@inject.tag()"}),"\n",(0,c.jsx)(n.p,{children:"Injects all dependencies that match a specific tag."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\n\n@injectable()\nclass PluginManager {\n  constructor(\n    @inject.tag('plugin') private plugins: Plugin[]\n  ) {}\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"injectgetter",children:"@inject.getter()"}),"\n",(0,c.jsx)(n.p,{children:"Injects a function that can be used to get the dependency later."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject, Getter } from 'contexify';\n\n@injectable()\nclass UserController {\n  constructor(\n    @inject.getter('services.UserService') private getUserService: Getter<UserService>\n  ) {}\n\n  async getUsers() {\n    // Get the service when needed\n    const userService = await this.getUserService();\n    return userService.getUsers();\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"injectview",children:"@inject.view()"}),"\n",(0,c.jsx)(n.p,{children:"Injects a ContextView that tracks bindings matching a filter."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject, ContextView } from 'contexify';\n\n@injectable()\nclass PluginManager {\n  constructor(\n    @inject.view(binding => binding.tagMap.plugin != null)\n    private pluginsView: ContextView<Plugin>\n  ) {}\n\n  async getPlugins() {\n    return this.pluginsView.values();\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"config",children:"@config()"}),"\n",(0,c.jsx)(n.p,{children:"Injects configuration for the current binding."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, config } from 'contexify';\n\n@injectable()\nclass EmailService {\n  constructor(\n    @config() private config: EmailConfig = {}\n  ) {}\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"property-injection",children:"Property Injection"}),"\n",(0,c.jsx)(n.p,{children:"In addition to constructor injection, Contexify also supports property injection."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\n\n@injectable()\nclass UserController {\n  @inject('services.UserService')\n  private userService: UserService;\n\n  async getUsers() {\n    return this.userService.getUsers();\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"method-injection",children:"Method Injection"}),"\n",(0,c.jsx)(n.p,{children:"Contexify also supports method injection."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\n\n@injectable()\nclass UserController {\n  async getUsers(\n    @inject('services.UserService') userService: UserService\n  ) {\n    return userService.getUsers();\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"optional-dependencies",children:"Optional Dependencies"}),"\n",(0,c.jsx)(n.p,{children:"You can mark dependencies as optional, which means they won't cause an error if they're not found."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject } from 'contexify';\n\n@injectable()\nclass UserService {\n  constructor(\n    @inject('services.Logger', { optional: true }) private logger?: Logger\n  ) {}\n\n  async createUser(userData: UserData) {\n    if (this.logger) {\n      this.logger.log('Creating user');\n    }\n    // ...\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"circular-dependencies",children:"Circular Dependencies"}),"\n",(0,c.jsxs)(n.p,{children:["Circular dependencies occur when two or more classes depend on each other. Contexify provides ways to handle circular dependencies using ",(0,c.jsx)(n.code,{children:"@inject.getter()"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"import { injectable, inject, Getter } from 'contexify';\n\n@injectable()\nclass ServiceA {\n  constructor(\n    @inject.getter('services.ServiceB') private getServiceB: Getter<ServiceB>\n  ) {}\n\n  async doSomething() {\n    const serviceB = await this.getServiceB();\n    return serviceB.doSomethingElse();\n  }\n}\n\n@injectable()\nclass ServiceB {\n  constructor(\n    @inject.getter('services.ServiceA') private getServiceA: Getter<ServiceA>\n  ) {}\n\n  async doSomethingElse() {\n    const serviceA = await this.getServiceA();\n    return serviceA.doSomething();\n  }\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Use constructor injection for required dependencies"}),"\n",(0,c.jsx)(n.li,{children:"Use property injection for optional dependencies"}),"\n",(0,c.jsxs)(n.li,{children:["Use ",(0,c.jsx)(n.code,{children:"@inject.getter()"})," for circular dependencies"]}),"\n",(0,c.jsx)(n.li,{children:"Use meaningful binding keys that follow a consistent naming convention"}),"\n",(0,c.jsx)(n.li,{children:"Keep your classes focused and with a single responsibility"}),"\n",(0,c.jsx)(n.li,{children:"Use interfaces for dependencies to make your code more testable"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,c.jsx)(n.p,{children:"Now that you understand Dependency Injection, you can learn about:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"./context",children:"Context"})," - The container for dependencies"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"./binding",children:"Binding"})," - How to register dependencies"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"../api/overview",children:"API Reference"})," - View the detailed API documentation"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},9880:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(4700);const c={},s=t.createContext(c);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);