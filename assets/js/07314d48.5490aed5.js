"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[852],{7409:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/decorators","title":"Decorators","description":"Contexify provides a set of decorators that make it easy to work with dependency injection in TypeScript.","source":"@site/docs/api/decorators.md","sourceDirName":"api","slug":"/api/decorators","permalink":"/contexify/docs/api/decorators","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/decorators.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"ContextView","permalink":"/contexify/docs/api/context-view"},"next":{"title":"Interfaces and Types","permalink":"/contexify/docs/api/interfaces"}}');var r=t(7968),s=t(9880);const o={sidebar_position:4},c="Decorators",a={},l=[{value:"@injectable()",id:"injectable",level:2},{value:"@inject()",id:"inject",level:2},{value:"@inject.tag()",id:"injecttag",level:2},{value:"@inject.getter()",id:"injectgetter",level:2},{value:"@inject.view()",id:"injectview",level:2},{value:"@config()",id:"config",level:2},{value:"@intercept()",id:"intercept",level:2},{value:"Complete Example",id:"complete-example",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"decorators",children:"Decorators"})}),"\n",(0,r.jsx)(n.p,{children:"Contexify provides a set of decorators that make it easy to work with dependency injection in TypeScript."}),"\n",(0,r.jsx)(n.h2,{id:"injectable",children:"@injectable()"}),"\n",(0,r.jsx)(n.p,{children:"Marks a class as injectable, allowing Contexify to create instances of it."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function injectable(): ClassDecorator;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass UserService {\n  constructor() {\n    console.log('UserService created');\n  }\n\n  getUsers() {\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n// Now UserService can be created through Context\ncontext.bind('services.UserService').toClass(UserService);\nconst userService = await context.get<UserService>('services.UserService');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"inject",children:"@inject()"}),"\n",(0,r.jsx)(n.p,{children:"Injects a dependency by its binding key."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function inject(\n  bindingKey: string,\n  options?: InjectionOptions\n): ParameterDecorator & PropertyDecorator;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bindingKey"}),": The key of the binding to inject."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the injection."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass UserRepository {\n  findAll() {\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n@injectable()\nclass UserService {\n  constructor(@inject('repositories.UserRepository') private userRepo: UserRepository) {}\n\n  getUsers() {\n    return this.userRepo.findAll();\n  }\n}\n\n// Bind dependencies\ncontext.bind('repositories.UserRepository').toClass(UserRepository);\ncontext.bind('services.UserService').toClass(UserService);\n\n// Resolve UserService (UserRepository is automatically injected)\nconst userService = await context.get<UserService>('services.UserService');\nconsole.log(userService.getUsers()); // Output: ['user1', 'user2', 'user3']\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Property Injection Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass UserService {\n  @inject('repositories.UserRepository')\n  private userRepo: UserRepository;\n\n  getUsers() {\n    return this.userRepo.findAll();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"injecttag",children:"@inject.tag()"}),"\n",(0,r.jsx)(n.p,{children:"Injects all dependencies that match a specific tag."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"namespace inject {\n  function tag(\n    tag: string,\n    options?: InjectionOptions\n  ): ParameterDecorator & PropertyDecorator;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tag"}),": The tag to match."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the injection."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass Logger {\n  constructor(private name: string) {}\n\n  log(message: string) {\n    console.log(`[${this.name}] ${message}`);\n  }\n}\n\n@injectable()\nclass Application {\n  constructor(@inject.tag('logger') private loggers: Logger[]) {}\n\n  run() {\n    this.loggers.forEach(logger => logger.log('Application started'));\n  }\n}\n\n// Bind multiple services with the same tag\ncontext.bind('loggers.console').to(new Logger('console')).tag('logger');\ncontext.bind('loggers.file').to(new Logger('file')).tag('logger');\ncontext.bind('app').toClass(Application);\n\n// Resolve the application (all services with the 'logger' tag are automatically injected)\nconst app = await context.get<Application>('app');\napp.run();\n// Output:\n// [console] Application started\n// [file] Application started\n"})}),"\n",(0,r.jsx)(n.h2,{id:"injectgetter",children:"@inject.getter()"}),"\n",(0,r.jsx)(n.p,{children:"Injects a function that can be used to get the dependency later."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"namespace inject {\n  function getter(\n    bindingKey: string,\n    options?: InjectionOptions\n  ): ParameterDecorator & PropertyDecorator;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bindingKey"}),": The key of the binding to inject."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the injection."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass ConfigService {\n  constructor(@inject.getter('config.database') private getDbConfig: Getter<any>) {}\n\n  async connectToDatabase() {\n    // Get the configuration only when needed\n    const dbConfig = await this.getDbConfig();\n    console.log(`Connecting to ${dbConfig.host}:${dbConfig.port}`);\n  }\n}\n\n// Bind configuration\ncontext.bind('config.database').to({\n  host: 'localhost',\n  port: 5432,\n  username: 'admin',\n  password: 'secret'\n});\n\ncontext.bind('services.ConfigService').toClass(ConfigService);\n\n// Resolve the service\nconst configService = await context.get<ConfigService>('services.ConfigService');\nawait configService.connectToDatabase(); // Output: Connecting to localhost:5432\n"})}),"\n",(0,r.jsx)(n.h2,{id:"injectview",children:"@inject.view()"}),"\n",(0,r.jsx)(n.p,{children:"Injects a ContextView that tracks bindings matching a filter."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"namespace inject {\n  function view(\n    filter: BindingFilter,\n    options?: InjectionOptions\n  ): ParameterDecorator & PropertyDecorator;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"}),": A function that filters bindings."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"options"})," (optional): Options for the injection."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass Plugin {\n  constructor(public name: string) {}\n\n  initialize() {\n    console.log(`Plugin ${this.name} initialized`);\n  }\n}\n\n@injectable()\nclass PluginManager {\n  constructor(\n    @inject.view(binding => binding.tags.has('plugin'))\n    private pluginView: ContextView<Plugin>\n  ) {}\n\n  async initializePlugins() {\n    const plugins = await this.pluginView.resolve();\n    plugins.forEach(plugin => plugin.initialize());\n  }\n}\n\n// Bind plugins and manager\ncontext.bind('plugins.logger').to(new Plugin('logger')).tag('plugin');\ncontext.bind('plugins.auth').to(new Plugin('auth')).tag('plugin');\ncontext.bind('plugins.cache').to(new Plugin('cache')).tag('plugin');\ncontext.bind('managers.PluginManager').toClass(PluginManager);\n\n// Resolve manager and initialize plugins\nconst pluginManager = await context.get<PluginManager>('managers.PluginManager');\nawait pluginManager.initializePlugins();\n// Output:\n// Plugin logger initialized\n// Plugin auth initialized\n// Plugin cache initialized\n"})}),"\n",(0,r.jsx)(n.h2,{id:"config",children:"@config()"}),"\n",(0,r.jsx)(n.p,{children:"Injects configuration for the current binding."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function config(\n  propertyPath?: string | ConfigurationOptions\n): ParameterDecorator & PropertyDecorator;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"propertyPath"})," (optional): The path to the configuration property, or configuration options."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass DatabaseService {\n  constructor(\n    @config('database.host') private host: string,\n    @config('database.port') private port: number\n  ) {}\n\n  connect() {\n    console.log(`Connecting to database at ${this.host}:${this.port}`);\n  }\n}\n\n// Bind configuration\ncontext.configure('services.DatabaseService').to({\n  database: {\n    host: 'localhost',\n    port: 5432\n  }\n});\n\ncontext.bind('services.DatabaseService').toClass(DatabaseService);\n\n// Resolve the service\nconst dbService = await context.get<DatabaseService>('services.DatabaseService');\ndbService.connect(); // Output: Connecting to database at localhost:5432\n"})}),"\n",(0,r.jsx)(n.h2,{id:"intercept",children:"@intercept()"}),"\n",(0,r.jsx)(n.p,{children:"Applies interceptors to a method or class."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function intercept(\n  ...interceptors: (Interceptor | Constructor<Interceptor>)[]\n): MethodDecorator & ClassDecorator;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"interceptors"}),": One or more interceptors to apply."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Define an interceptor\nclass LoggingInterceptor implements Interceptor {\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>) {\n    console.log(`Calling ${invocationCtx.methodName} with args:`, invocationCtx.args);\n    const start = Date.now();\n    const result = next();\n\n    if (result instanceof Promise) {\n      return result.then(value => {\n        console.log(`${invocationCtx.methodName} completed in ${Date.now() - start}ms`);\n        return value;\n      });\n    }\n\n    console.log(`${invocationCtx.methodName} completed in ${Date.now() - start}ms`);\n    return result;\n  }\n}\n\n// Use the interceptor\n@injectable()\nclass UserService {\n  @intercept(new LoggingInterceptor())\n  async findUsers() {\n    // Simulate database query\n    await new Promise(resolve => setTimeout(resolve, 100));\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n// Bind the service\ncontext.bind('services.UserService').toClass(UserService);\n\n// Resolve the service and call the method\nconst userService = await context.get<UserService>('services.UserService');\nconst users = await userService.findUsers();\n// Output:\n// Calling findUsers with args: []\n// findUsers completed in 100ms\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Class-level Interceptor Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Apply interceptor to all methods in the class\n@injectable()\n@intercept(new LoggingInterceptor())\nclass UserService {\n  async findUsers() {\n    // ...\n  }\n\n  async createUser(name: string) {\n    // ...\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example showing how to use the decorators together:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {\n  Context,\n  injectable,\n  inject,\n  config,\n  intercept,\n  Interceptor,\n  InvocationContext,\n  ValueOrPromise\n} from 'contexify';\n\n// Define an interceptor\nclass LoggingInterceptor implements Interceptor {\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>) {\n    console.log(`Calling ${invocationCtx.methodName}`);\n    const result = next();\n    console.log(`${invocationCtx.methodName} completed`);\n    return result;\n  }\n}\n\n// Define a configuration interface\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n}\n\n// Define a repository\n@injectable()\nclass UserRepository {\n  constructor(\n    @config('database') private dbConfig: DatabaseConfig,\n    @inject('services.LoggerService') private logger: LoggerService\n  ) {}\n\n  findAll() {\n    this.logger.log(`Finding all users using ${this.dbConfig.host}:${this.dbConfig.port}`);\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n// Define a logger service\n@injectable()\nclass LoggerService {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n// Define a user service\n@injectable()\n@intercept(new LoggingInterceptor())\nclass UserService {\n  constructor(\n    @inject('repositories.UserRepository') private userRepo: UserRepository,\n    @inject.getter('config.appName') private getAppName: Getter<string>\n  ) {}\n\n  async getUsers() {\n    const appName = await this.getAppName();\n    console.log(`Getting users for ${appName}`);\n    return this.userRepo.findAll();\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind services and configuration\ncontext.bind('services.LoggerService').toClass(LoggerService);\ncontext.bind('repositories.UserRepository').toClass(UserRepository);\ncontext.bind('services.UserService').toClass(UserService);\n\ncontext.bind('config.appName').to('MyApp');\ncontext.configure('repositories.UserRepository').to({\n  database: {\n    host: 'localhost',\n    port: 5432,\n    username: 'admin',\n    password: 'secret'\n  }\n});\n\n// Use the services\nasync function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const users = await userService.getUsers();\n  console.log('Users:', users);\n}\n\nrun().catch(err => console.error(err));\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9880:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(4700);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);