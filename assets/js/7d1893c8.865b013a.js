"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[576],{4859:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/interfaces","title":"Interfaces and Types","description":"Contexify provides a set of interfaces and types that define the core concepts of the framework.","source":"@site/docs/api/interfaces.md","sourceDirName":"api","slug":"/api/interfaces","permalink":"/contexify/docs/api/interfaces","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/api/interfaces.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Decorators","permalink":"/contexify/docs/api/decorators"},"next":{"title":"API Usage Examples","permalink":"/contexify/docs/api/usage-examples"}}');var r=i(7968),s=i(9880);const c={sidebar_position:5},o="Interfaces and Types",a={},l=[{value:"Interfaces",id:"interfaces",level:2},{value:"Provider",id:"provider",level:3},{value:"Interceptor",id:"interceptor",level:3},{value:"ContextObserver",id:"contextobserver",level:3},{value:"InvocationContext",id:"invocationcontext",level:3},{value:"Enums",id:"enums",level:2},{value:"BindingScope",id:"bindingscope",level:3},{value:"Types",id:"types",level:2},{value:"Constructor",id:"constructor",level:3},{value:"ValueOrPromise",id:"valueorpromise",level:3},{value:"Getter",id:"getter",level:3},{value:"BindingFilter",id:"bindingfilter",level:3},{value:"BindingComparator",id:"bindingcomparator",level:3},{value:"Complete Example",id:"complete-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"interfaces-and-types",children:"Interfaces and Types"})}),"\n",(0,r.jsx)(n.p,{children:"Contexify provides a set of interfaces and types that define the core concepts of the framework."}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"provider",children:"Provider"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Provider"})," interface defines a class that can create values dynamically."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Provider<T> {\n  value(): ValueOrPromise<T>;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value()"}),": Returns a value or a promise of a value."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass RandomNumberProvider implements Provider<number> {\n  value() {\n    return Math.random();\n  }\n}\n\n// Bind the provider\ncontext.bind('random').toProvider(RandomNumberProvider);\n\n// Resolve values\nconst random1 = await context.get<number>('random');\nconst random2 = await context.get<number>('random');\nconsole.log(random1 !== random2); // Output: true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"interceptor",children:"Interceptor"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Interceptor"})," interface defines a class that can intercept method calls."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Interceptor {\n  intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ): ValueOrPromise<any>;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"intercept(invocationCtx, next)"}),": Intercepts a method call. ",(0,r.jsx)(n.code,{children:"invocationCtx"})," contains information about the method being called, and ",(0,r.jsx)(n.code,{children:"next"})," is a function that continues the method execution."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Define a caching interceptor\nclass CachingInterceptor implements Interceptor {\n  private cache = new Map<string, any>();\n\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>) {\n    const cacheKey = `${invocationCtx.targetClass.name}.${invocationCtx.methodName}(${JSON.stringify(invocationCtx.args)})`;\n\n    if (this.cache.has(cacheKey)) {\n      console.log(`Cache hit for ${cacheKey}`);\n      return this.cache.get(cacheKey);\n    }\n\n    console.log(`Cache miss for ${cacheKey}`);\n    const result = next();\n\n    if (result instanceof Promise) {\n      return result.then(value => {\n        this.cache.set(cacheKey, value);\n        return value;\n      });\n    }\n\n    this.cache.set(cacheKey, result);\n    return result;\n  }\n}\n\n// Use the caching interceptor\n@injectable()\nclass ExpensiveService {\n  @intercept(new CachingInterceptor())\n  async computeExpensiveValue(input: string) {\n    console.log(`Computing expensive value for ${input}`);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return `Result for ${input}`;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"contextobserver",children:"ContextObserver"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContextObserver"})," interface defines a class that can observe context events."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ContextObserver {\n  filter?: BindingFilter;\n  observe(\n    eventType: string,\n    binding: Readonly<Binding<unknown>>,\n    context: Context\n  ): ValueOrPromise<void>;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filter"})," (optional): A function that filters bindings to observe."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"observe(eventType, binding, context)"}),": Called when an event occurs. ",(0,r.jsx)(n.code,{children:"eventType"})," is the type of event, ",(0,r.jsx)(n.code,{children:"binding"})," is the binding involved, and ",(0,r.jsx)(n.code,{children:"context"})," is the context where the event occurred."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Define an observer\nclass BindingObserver implements ContextObserver {\n  // Only observe bindings with the 'service' tag\n  filter = (binding: Readonly<Binding<unknown>>) => binding.tags.has('service');\n\n  observe(eventType: string, binding: Readonly<Binding<unknown>>, context: Context) {\n    console.log(`Event: ${eventType}, Binding: ${binding.key}`);\n  }\n}\n\n// Create a context and subscribe the observer\nconst context = new Context('app');\ncontext.subscribe(new BindingObserver());\n\n// Add a binding (will trigger the observer)\ncontext.bind('services.UserService').toClass(UserService).tag('service');\n// Output: Event: bind, Binding: services.UserService\n\n// Resolve the binding (will trigger the observer)\nawait context.get('services.UserService');\n// Output: Event: resolve:before, Binding: services.UserService\n// Output: Event: resolve:after, Binding: services.UserService\n"})}),"\n",(0,r.jsx)(n.h3,{id:"invocationcontext",children:"InvocationContext"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"InvocationContext"})," interface provides information about a method invocation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface InvocationContext {\n  target: object;\n  targetClass: Constructor<any>;\n  methodName: string;\n  args: any[];\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Properties:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": The object on which the method is being called."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"targetClass"}),": The class of the object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"methodName"}),": The name of the method being called."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"args"}),": The arguments passed to the method."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Define an interceptor that logs method invocations\nclass LoggingInterceptor implements Interceptor {\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>) {\n    console.log(`Calling ${invocationCtx.targetClass.name}.${invocationCtx.methodName} with args:`, invocationCtx.args);\n    return next();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,r.jsx)(n.h3,{id:"bindingscope",children:"BindingScope"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BindingScope"})," enum defines the scope of a binding."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum BindingScope {\n  SINGLETON = 'singleton',\n  TRANSIENT = 'transient',\n  CONTEXT = 'context',\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Values:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SINGLETON"}),": The binding creates a single instance that is shared across all contexts."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TRANSIENT"}),": The binding creates a new instance for each resolution."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"CONTEXT"}),": The binding creates a single instance that is shared within the same context."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Singleton scope (default)\ncontext.bind('singleton').to(new Date()).inScope(BindingScope.SINGLETON);\n\n// Transient scope (new instance for each resolution)\ncontext.bind('transient').toDynamicValue(() => new Date()).inScope(BindingScope.TRANSIENT);\n\n// Context scope (instance shared within the same context)\ncontext.bind('contextScoped').toDynamicValue(() => new Date()).inScope(BindingScope.CONTEXT);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Constructor"})," type represents a class constructor."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type Constructor<T> = new (...args: any[]) => T;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function createInstance<T>(ctor: Constructor<T>): T {\n  return new ctor();\n}\n\nconst userService = createInstance(UserService);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"valueorpromise",children:"ValueOrPromise"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ValueOrPromise"})," type represents a value or a promise of a value."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type ValueOrPromise<T> = T | Promise<T>;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function getValue(): ValueOrPromise<string> {\n  if (Math.random() > 0.5) {\n    return 'Synchronous value';\n  } else {\n    return Promise.resolve('Asynchronous value');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getter",children:"Getter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Getter"})," type represents a function that returns a value or a promise of a value."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type Getter<T> = () => ValueOrPromise<T>;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"@injectable()\nclass ConfigService {\n  constructor(@inject.getter('config.database') private getDbConfig: Getter<any>) {}\n\n  async connectToDatabase() {\n    // Get the configuration only when needed\n    const dbConfig = await this.getDbConfig();\n    console.log(`Connecting to ${dbConfig.host}:${dbConfig.port}`);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bindingfilter",children:"BindingFilter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BindingFilter"})," type represents a function that filters bindings."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type BindingFilter = (binding: Readonly<Binding<unknown>>) => boolean;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a filter for service bindings\nconst serviceFilter: BindingFilter = binding => binding.tags.has('service');\n\n// Create a view using the filter\nconst serviceView = context.createView<any>(serviceFilter);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bindingcomparator",children:"BindingComparator"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BindingComparator"})," type represents a function that compares bindings."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type BindingComparator = (a: Readonly<Binding<unknown>>, b: Readonly<Binding<unknown>>) => number;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create a comparator that sorts bindings by key\nconst keyComparator: BindingComparator = (a, b) => a.key.localeCompare(b.key);\n\n// Create a view using the filter and comparator\nconst serviceView = context.createView<any>(serviceFilter, keyComparator);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example showing how to use these interfaces and types together:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {\n  Context,\n  Binding,\n  BindingScope,\n  Provider,\n  Interceptor,\n  ContextObserver,\n  InvocationContext,\n  ValueOrPromise,\n  Constructor,\n  Getter,\n  BindingFilter,\n  BindingComparator,\n  injectable,\n  intercept\n} from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Define a provider\n@injectable()\nclass ConfigProvider implements Provider<any> {\n  value(): ValueOrPromise<any> {\n    return {\n      apiUrl: 'https://api.example.com',\n      timeout: 5000\n    };\n  }\n}\n\n// Define an interceptor\nclass LoggingInterceptor implements Interceptor {\n  intercept(invocationCtx: InvocationContext, next: () => ValueOrPromise<any>): ValueOrPromise<any> {\n    console.log(`Calling ${invocationCtx.methodName}`);\n    const result = next();\n    console.log(`${invocationCtx.methodName} completed`);\n    return result;\n  }\n}\n\n// Define an observer\nclass ServiceObserver implements ContextObserver {\n  filter: BindingFilter = binding => binding.tags.has('service');\n\n  observe(eventType: string, binding: Readonly<Binding<unknown>>, context: Context): ValueOrPromise<void> {\n    console.log(`Service event: ${eventType}, binding: ${binding.key}`);\n  }\n}\n\n// Define a service\n@injectable()\nclass UserService {\n  @intercept(new LoggingInterceptor())\n  getUsers() {\n    return ['user1', 'user2', 'user3'];\n  }\n}\n\n// Bind services and configuration\ncontext.bind('config').toProvider(ConfigProvider);\ncontext.bind('services.UserService').toClass(UserService).tag('service').inScope(BindingScope.SINGLETON);\n\n// Subscribe the observer\ncontext.subscribe(new ServiceObserver());\n\n// Define a binding filter and comparator\nconst serviceFilter: BindingFilter = binding => binding.tags.has('service');\nconst keyComparator: BindingComparator = (a, b) => a.key.localeCompare(b.key);\n\n// Create a view\nconst serviceView = context.createView<any>(serviceFilter, keyComparator);\n\n// Use the services\nasync function run() {\n  // Resolve the config\n  const config = await context.get<any>('config');\n  console.log('Config:', config);\n\n  // Resolve the user service\n  const userService = await context.get<UserService>('services.UserService');\n  console.log('Users:', userService.getUsers());\n\n  // Get all service bindings\n  const serviceBindings = serviceView.bindings();\n  console.log(`Found ${serviceBindings.length} service bindings`);\n}\n\nrun().catch(err => console.error(err));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9880:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var t=i(4700);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);