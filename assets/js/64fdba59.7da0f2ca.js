"use strict";(self.webpackChunk_contexify_docs_site=self.webpackChunk_contexify_docs_site||[]).push([[50],{7763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"examples/features","title":"Features Examples","description":"This section provides standalone examples of various features of Contexify.","source":"@site/docs/examples/features.md","sourceDirName":"examples","slug":"/examples/features","permalink":"/contexify/docs/examples/features","draft":false,"unlisted":false,"editUrl":"https://github.com/teomyth/contexify/edit/main/docs-site/docs/examples/features.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Basic Example","permalink":"/contexify/docs/examples/basic-example"},"next":{"title":"Modular Application Example","permalink":"/contexify/docs/examples/modular-app"}}');var r=t(7968),s=t(9880);const i={sidebar_position:2},c="Features Examples",a={},l=[{value:"Basic Context and Binding",id:"basic-context-and-binding",level:2},{value:"Dependency Injection",id:"dependency-injection",level:2},{value:"Context Hierarchy",id:"context-hierarchy",level:2},{value:"Binding Scopes",id:"binding-scopes",level:2},{value:"Interceptors",id:"interceptors",level:2},{value:"Context Events and Observers",id:"context-events-and-observers",level:2},{value:"Context Views",id:"context-views",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Providers",id:"providers",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"features-examples",children:"Features Examples"})}),"\n",(0,r.jsx)(n.p,{children:"This section provides standalone examples of various features of Contexify."}),"\n",(0,r.jsx)(n.h2,{id:"basic-context-and-binding",children:"Basic Context and Binding"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the basic usage of Context and Binding."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a context\nconst context = new Context('my-context');\n\n// Bind a value\ncontext.bind('greeting').to('Hello, world!');\n\n// Retrieve the value\nasync function run() {\n  const greeting = await context.get('greeting');\n  console.log(greeting); // Output: Hello, world!\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates dependency injection using the ",(0,r.jsx)(n.code,{children:"@inject"})," decorator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, injectable, inject } from 'contexify';\n\n// Define interfaces\ninterface Logger {\n  log(message: string): void;\n}\n\ninterface UserService {\n  createUser(name: string): Promise<User>;\n}\n\ninterface User {\n  id: string;\n  name: string;\n}\n\n// Implement services\n@injectable()\nclass ConsoleLogger implements Logger {\n  log(message: string) {\n    console.log(`[LOG] ${message}`);\n  }\n}\n\n@injectable()\nclass DefaultUserService implements UserService {\n  constructor(@inject('services.Logger') private logger: Logger) {}\n\n  async createUser(name: string): Promise<User> {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind services\ncontext.bind('services.Logger').toClass(ConsoleLogger);\ncontext.bind('services.UserService').toClass(DefaultUserService);\n\n// Use services\nasync function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const user = await userService.createUser('John Doe');\n  console.log('Created user:', user);\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-hierarchy",children:"Context Hierarchy"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the context hierarchy."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a root context\nconst rootContext = new Context('root');\nrootContext.bind('greeting').to('Hello from root!');\nrootContext.bind('name').to('Root');\n\n// Create a child context\nconst childContext = new Context(rootContext, 'child');\nchildContext.bind('name').to('Child');\n\n// Create a grandchild context\nconst grandchildContext = new Context(childContext, 'grandchild');\n\n// Retrieve values\nasync function run() {\n  // Grandchild inherits from child and root\n  console.log(await grandchildContext.get('greeting')); // Output: Hello from root!\n  console.log(await grandchildContext.get('name')); // Output: Child (from child context)\n\n  // Child inherits from root\n  console.log(await childContext.get('greeting')); // Output: Hello from root!\n  console.log(await childContext.get('name')); // Output: Child\n\n  // Root only has its own bindings\n  console.log(await rootContext.get('greeting')); // Output: Hello from root!\n  console.log(await rootContext.get('name')); // Output: Root\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"binding-scopes",children:"Binding Scopes"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the different binding scopes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, BindingScope, injectable } from 'contexify';\n\n@injectable()\nclass Counter {\n  private count = 0;\n\n  increment() {\n    this.count++;\n    return this.count;\n  }\n\n  getCount() {\n    return this.count;\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Singleton scope: One instance for the entire application\ncontext\n  .bind('counters.singleton')\n  .toClass(Counter)\n  .inScope(BindingScope.SINGLETON);\n\n// Transient scope: New instance each time it's resolved\ncontext\n  .bind('counters.transient')\n  .toClass(Counter)\n  .inScope(BindingScope.TRANSIENT);\n\n// Context scope: One instance per context\ncontext\n  .bind('counters.context')\n  .toClass(Counter)\n  .inScope(BindingScope.CONTEXT);\n\n// Use counters\nasync function run() {\n  // Singleton counter\n  const singleton1 = await context.get('counters.singleton');\n  const singleton2 = await context.get('counters.singleton');\n  \n  singleton1.increment();\n  console.log('Singleton 1 count:', singleton1.getCount()); // Output: 1\n  console.log('Singleton 2 count:', singleton2.getCount()); // Output: 1 (same instance)\n  \n  // Transient counter\n  const transient1 = await context.get('counters.transient');\n  const transient2 = await context.get('counters.transient');\n  \n  transient1.increment();\n  console.log('Transient 1 count:', transient1.getCount()); // Output: 1\n  console.log('Transient 2 count:', transient2.getCount()); // Output: 0 (different instance)\n  \n  // Context counter\n  const context1 = await context.get('counters.context');\n  const context2 = await context.get('counters.context');\n  \n  context1.increment();\n  console.log('Context 1 count:', context1.getCount()); // Output: 1\n  console.log('Context 2 count:', context2.getCount()); // Output: 1 (same instance in this context)\n  \n  // Create a child context\n  const childContext = new Context(context, 'child');\n  \n  // Context counter in child context\n  const childContext1 = await childContext.get('counters.context');\n  \n  console.log('Child context count:', childContext1.getCount()); // Output: 0 (different instance in child context)\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interceptors",children:"Interceptors"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the use of interceptors."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, injectable, intercept, Interceptor, InvocationContext, ValueOrPromise } from 'contexify';\n\n// Define an interceptor\nclass LogInterceptor implements Interceptor {\n  async intercept(\n    invocationCtx: InvocationContext,\n    next: () => ValueOrPromise<any>\n  ) {\n    const { methodName, args } = invocationCtx;\n    console.log(`Calling ${methodName} with args:`, args);\n    \n    const start = Date.now();\n    try {\n      const result = await next();\n      const duration = Date.now() - start;\n      console.log(`${methodName} completed in ${duration}ms with result:`, result);\n      return result;\n    } catch (error) {\n      const duration = Date.now() - start;\n      console.error(`${methodName} failed after ${duration}ms with error:`, error);\n      throw error;\n    }\n  }\n}\n\n// Define a service with intercepted methods\n@injectable()\nclass CalculatorService {\n  @intercept(LogInterceptor)\n  add(a: number, b: number): number {\n    return a + b;\n  }\n  \n  @intercept(LogInterceptor)\n  divide(a: number, b: number): number {\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    return a / b;\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind the service\ncontext.bind('services.CalculatorService').toClass(CalculatorService);\n\n// Use the service\nasync function run() {\n  const calculator = await context.get<CalculatorService>('services.CalculatorService');\n  \n  // Call the add method\n  const sum = calculator.add(2, 3);\n  console.log('Sum:', sum);\n  \n  // Call the divide method\n  try {\n    const quotient = calculator.divide(10, 2);\n    console.log('Quotient:', quotient);\n    \n    // This will throw an error\n    calculator.divide(10, 0);\n  } catch (error) {\n    console.error('Error caught:', error.message);\n  }\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-events-and-observers",children:"Context Events and Observers"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates context events and observers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, ContextObserver } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Create an observer\nconst serviceObserver: ContextObserver = {\n  // Only interested in bindings with 'service' tag\n  filter: binding => binding.tagMap.service != null,\n\n  observe(event, binding, ctx) {\n    if (event === 'bind') {\n      console.log(`Service registered: ${binding.key}`);\n    } else if (event === 'unbind') {\n      console.log(`Service unregistered: ${binding.key}`);\n    }\n  }\n};\n\n// Register the observer\ncontext.subscribe(serviceObserver);\n\n// Add bindings\ncontext.bind('services.UserService')\n  .to({ name: 'UserService' })\n  .tag('service');\n\ncontext.bind('services.OrderService')\n  .to({ name: 'OrderService' })\n  .tag('service');\n\ncontext.bind('repositories.UserRepository')\n  .to({ name: 'UserRepository' })\n  .tag('repository');\n\n// Remove a binding\ncontext.unbind('services.OrderService');\n\n// Output:\n// Service registered: services.UserService\n// Service registered: services.OrderService\n// Service unregistered: services.OrderService\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-views",children:"Context Views"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates context views."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context } from 'contexify';\n\n// Create a context\nconst context = new Context('application');\n\n// Create a view that tracks all bindings with 'controller' tag\nconst controllersView = context.createView(\n  binding => binding.tagMap.controller != null\n);\n\n// Listen for view events\ncontrollersView.on('refresh', () => {\n  console.log('Controllers view refreshed');\n});\n\n// Add controllers\ncontext.bind('controllers.UserController')\n  .to({ name: 'UserController' })\n  .tag('controller');\n\ncontext.bind('controllers.OrderController')\n  .to({ name: 'OrderController' })\n  .tag('controller');\n\n// Get all controllers\nasync function getControllers() {\n  const controllers = await controllersView.values();\n  console.log('Controllers:', controllers.map(c => c.name));\n}\n\n// Remove a controller\nfunction removeOrderController() {\n  context.unbind('controllers.OrderController');\n}\n\n// Run the example\nasync function run() {\n  await getControllers();\n  // Output: Controllers: ['UserController', 'OrderController']\n  \n  removeOrderController();\n  \n  await getControllers();\n  // Output: Controllers: ['UserController']\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates configuration management."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, injectable, config } from 'contexify';\n\n// Define configuration types\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\ninterface ServerConfig {\n  port: number;\n  host: string;\n}\n\n// Define a service that uses configuration\n@injectable()\nclass DatabaseService {\n  constructor(\n    @config() private config: DatabaseConfig\n  ) {}\n  \n  connect() {\n    const { host, port, username, password, database } = this.config;\n    console.log(`Connecting to database ${database} at ${host}:${port} with username ${username}`);\n    // In a real application, this would connect to a database\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind the service\ncontext.bind('services.DatabaseService').toClass(DatabaseService);\n\n// Configure the service\ncontext.configure('services.DatabaseService').to({\n  host: 'localhost',\n  port: 5432,\n  username: 'admin',\n  password: 'password',\n  database: 'myapp',\n});\n\n// Use the service\nasync function run() {\n  const dbService = await context.get<DatabaseService>('services.DatabaseService');\n  dbService.connect();\n  // Output: Connecting to database myapp at localhost:5432 with username admin\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"providers",children:"Providers"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the use of providers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Context, Provider, injectable, inject } from 'contexify';\n\n// Define interfaces\ninterface Logger {\n  log(message: string): void;\n}\n\ninterface LoggerFactory {\n  createLogger(name: string): Logger;\n}\n\n// Implement a provider\n@injectable()\nclass LoggerFactoryProvider implements Provider<LoggerFactory> {\n  value(): LoggerFactory {\n    return {\n      createLogger: (name: string): Logger => {\n        return {\n          log: (message: string) => {\n            console.log(`[${name}] ${message}`);\n          },\n        };\n      },\n    };\n  }\n}\n\n// Implement a service that uses the provider\n@injectable()\nclass UserService {\n  private logger: Logger;\n  \n  constructor(\n    @inject('factories.LoggerFactory') loggerFactory: LoggerFactory\n  ) {\n    this.logger = loggerFactory.createLogger('UserService');\n  }\n  \n  createUser(name: string) {\n    this.logger.log(`Creating user: ${name}`);\n    return { id: Date.now().toString(), name };\n  }\n}\n\n// Create a context\nconst context = new Context('application');\n\n// Bind the provider\ncontext.bind('factories.LoggerFactory').toProvider(LoggerFactoryProvider);\n\n// Bind the service\ncontext.bind('services.UserService').toClass(UserService);\n\n// Use the service\nasync function run() {\n  const userService = await context.get<UserService>('services.UserService');\n  const user = userService.createUser('John Doe');\n  console.log('Created user:', user);\n  // Output:\n  // [UserService] Creating user: John Doe\n  // Created user: { id: '1621234567890', name: 'John Doe' }\n}\n\nrun().catch(err => console.error(err));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you've seen examples of various features of Contexify, you can:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Explore the ",(0,r.jsx)(n.a,{href:"./modular-app",children:"Modular Application Example"})," to see how these features are used in a complete application"]}),"\n",(0,r.jsxs)(n.li,{children:["Read the ",(0,r.jsx)(n.a,{href:"../category/core-concepts",children:"Core Concepts"})," documentation to learn more about the concepts demonstrated in these examples"]}),"\n",(0,r.jsxs)(n.li,{children:["Check out the ",(0,r.jsx)(n.a,{href:"../category/guides",children:"Guides"})," for best practices and how-to instructions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9880:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(4700);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);